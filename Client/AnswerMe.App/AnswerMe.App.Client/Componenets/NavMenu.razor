@inject NavigationManager NavigationManager


<aside id="SidebarMenu" class="fixed top-0 left-0 z-40 w-1/4 h-screen pt-20 transition-transform -translate-x-full xl:-translate-x-0 2xl:-translate-x-0 bg-white border-r border-gray-200 dark:bg-gray-800 dark:border-gray-700" aria-label="Sidebar">

    <div class="h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-gray-900">
        <div role="tablist" class="tabs tabs-boxed grid grid-cols-2 tab-primary" style="background-color: #111827">

            <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Private Chat" style="color: wheat">
            <div role="tabpanel" class="tab-content ">
                <ul class="space-y-2 font-medium" style="background-color: #111827">
                    @for (var i = 0; i < 20; i++)
                    {
                        <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:20px ">
                            <div class="avatar online ">
                                <div class="w-16 h-16 rounded-full">
                                    <img src="/image/ProfileImage.jpg"/>
                                </div>
                            </div>
                            <div class="w-full  flex flex-col-reverse">
                                <div style="display: grid;margin-top: 15px">
                                    <p style="margin-left: 15px;font-size: 12px">hello how are you ?</p>
                                    <div style=" grid-column-end: 12">
                                        <span class="badge">19 day ago</span>
                                    </div>
                                </div>
                                <div style="display: grid">
                                    <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">amir hossein</h1>
                                    <div style=" grid-column-end: 12">
                                        <span class="badge badge-primary">+99</span>
                                    </div>
                                </div>

                            </div>
                        </li>
                    }
                </ul>
            </div>

            <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Group Chat" style="color: wheat" checked/>
            <div role="tabpanel" class="tab-content ">
                <ul class="space-y-2 font-medium" style="background-color: #111827">
                    @for (var i = 0; i < 20; i++)
                    {
                        <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:20px ">
                            <div class="avatar online ">
                                <div class="w-16 h-16 rounded-full">
                                    <img src="/image/ProfileImage.jpg"/>
                                </div>
                            </div>
                            <div class="w-full  flex flex-col-reverse">
                                <div style="display: grid;margin-top: 15px">
                                    <p style="margin-left: 15px;font-size: 12px">hello how are you ?</p>
                                    <div style=" grid-column-end: 12">
                                        <span class="badge">19 day ago</span>
                                    </div>
                                </div>
                                <div style="display: grid">
                                    <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">Ali group</h1>
                                    <div style=" grid-column-end: 12">
                                        <span class="badge badge-success">+99</span>
                                    </div>
                                </div>

                            </div>
                        </li>
                    }
                </ul>
            </div>

        </div>

    </div>
</aside>


@code {

    private string NavMenuClass = "menu-off";


    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await ShouldContentFullScreen.InvokeAsync(true);
    //     if (firstRender)
    //     {
    //         var lDotNetReference = DotNetObjectReference.Create(this);
    //
    //         await JSRuntime.InvokeVoidAsync("setDotnetReference", lDotNetReference);
    //
    //         var screenSize = await JSRuntime.InvokeAsync<string>("getScreenSizeCategory");
    //         await OnWindowResized(screenSize);
    //         StateHasChanged();
    //     }
    //
    //
    //     await base.OnAfterRenderAsync(firstRender);
    // }

    @*     [JSInvokable] *@
    @*     public async Task OnWindowResized(string screenSize) *@
    @*     { *@
    @*         await ShouldContentFullScreen.InvokeAsync(true); *@
    @*         if (screenSize is "sm" or "md") *@
    @*         { *@
    @*             var isInHome = IsHomePage(NavigationManager.Uri); *@
    @*             if (!isInHome) *@
    @*             { *@
    @*                 NavMenuClass = "menu-off"; *@
    @*                 StateHasChanged(); *@
    @*             } *@
    @* *@
    @*     //if user is not at home page witch is / *@
    @*     //hidden sidebar by menu-off *@
    @* *@
    @*     //else fullscreen the sidebar *@
    @*         } *@
    @*         else *@
    @*         { *@
    @*             NavMenuClass = "menu-on"; *@
    @*             StateHasChanged(); *@
    @*         } *@
    @*     } *@
    @* *@
    @*     public static bool IsHomePage(string uri) *@
    @*     { *@
    @*     // Check if the current URL is the home page *@
    @*         return string.IsNullOrEmpty(new Uri(uri).AbsolutePath) || new Uri(uri).AbsolutePath == "/"; *@
    @*     } *@
    @* *@
    @* *@
    @* *@
    @* } *@


    @* @inject IJSRuntime JSRuntime

@code {
    private string ScreenSizeCategory { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", "function getScreenSizeCategory() { /* ... JavaScript function code ... */ }");
            await JSRuntime.InvokeVoidAsync("eval", "window.addEventListener('resize', function () { DotNet.invokeMethodAsync('YourAssemblyName', 'OnResize').then(size => { console.log('Screen size category: ' + size); }); });");
        }
    }

    [JSInvokable]
    public async Task<string> OnResize()
    {
        ScreenSizeCategory = await JSRuntime.InvokeAsync<string>("getScreenSizeCategory");
    // Perform actions based on the ScreenSizeCategory, or use it as needed

    // Call any C# method or update UI based on the ScreenSizeCategory
        StateHasChanged();
        return ScreenSizeCategory;
    }
}
 *@


    @* @code
{
    private string NavMenuClass = "menu-on";
    private string ThemeMenuClass = "menu-off";
    private string ProfileMenuClass = "menu-off";
    private string SidebarHiddenOrShow = "";


    private void LogResize()
    {

    }


    private void ToggleNavMenu()
    {
        if (ThemeMenuClass == "menu-on") ThemeMenuClass = "menu-off";
        if (ProfileMenuClass == "menu-on") ProfileMenuClass = "menu-off";

        NavMenuClass = NavMenuClass == "menu-on" ? "menu-off" : "menu-on";
    }

    private void ToggleThemeMenu()
    {
        if (NavMenuClass == "menu-on") NavMenuClass = "menu-off";
        if (ProfileMenuClass == "menu-on") ProfileMenuClass = "menu-off";

        ThemeMenuClass = ThemeMenuClass == "menu-on" ? "menu-off" : "menu-on";
    }

    private void ToggleProfileMenu()
    {
        if (NavMenuClass == "menu-on") NavMenuClass = "menu-off";
        if (ThemeMenuClass == "menu-on") ThemeMenuClass = "menu-off";

        ProfileMenuClass = ProfileMenuClass == "menu-on" ? "menu-off" : "menu-on";
    }
}
 *@}