@using AnswerMe.Client.Core.Extensions
@using Models.Shared.Requests.Shared
@using Models.Shared.Requests.Upload
@inject IUserService UserService
@inject IObjectStorageService StorageService
@inject IObjectHelperService ObjectHelperService

<div class="flex">
    <div class="dropdown dropdown-right" style="z-index: 2">
        <button @onclick="ViewMenuAsync" role="button" class="btn btn-circle" style="width: 60px;height: 60px;margin: 20px 0 20px 35px;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32" id="backarrow">
                <path fill="none" d="M0 0h24v24H0V0z" opacity=".87"></path><path d="M16.62 2.99c-.49-.49-1.28-.49-1.77 0L6.54 11.3c-.39.39-.39 1.02 0 1.41l8.31 8.31c.49.49 1.28.49 1.77 0s.49-1.28 0-1.77L9.38 12l7.25-7.25c.48-.48.48-1.28-.01-1.76z" fill="#a6adbb" class="color000000 svgShape"></path>
            </svg>
        </button>
    </div>

    <div class="flex" style="position: absolute;width: 100%;justify-content: center;margin-top: 10px">
        <div class="avatar" style="align-self: center">
            <div class="w-16 h-16 rounded-full">
                <img src="image/Logo.jpeg"/>
            </div>
        </div>
        <h1 style="align-self: center;margin-left: 5px;font-weight: bold">Answer Me</h1>
    </div>
</div>


<div class="card shrink-0 w-full max-w-sm shadow-2xl bg-base-100" style="display:contents">
    <form class="card-body" style="display:grid;justify-content: center">
        <div class="form-control mt-6" style="display:grid">
            <div class="avatar" style="display: grid">
                <div class="w-24 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2" style="justify-self: center">
                    <UserAvatar Class="w-24" ImageUrl="@ImageUrl" Letter="@_editUserRequest.FullName?.FirstLetter()"/>
                </div>
            </div>
            @if (UploadProgress != null)
            {
                <progress class="progress progress-primary w-56 mt-12" value="@UploadProgress" max="100" style="justify-self: center"></progress>
                <button type="button" @onclick="CancelUpload" class="btn btn-outline btn-secondary mt-6">Cancel</button>
            }
            else
            {
                <InputFile id="@ElementIds.UploadInput" OnChange="ImageChanged" type="file" class="file-input file-input-bordered file-input-primary w-full max-w-xs mt-12 "/>
            }
            

        </div>

        <div class="form-control mt-6">
            <label class="label">
                <span class="label-text">Display Name</span>
            </label>
            <input type="text" @oninput="DisplayNameChange" value="@_editUserRequest.FullName" placeholder="Display Name" class="input input-bordered" required/>
        </div>

        <div class="form-control mt-6">
            <button @onclick="SaveChanges" type="button" class="btn btn-outline btn-primary">Save</button>
        </div>
    </form>
</div>


@code {

    private EditUserRequest _editUserRequest = new();

    [Parameter] public string? ChatsMenuClass { get; set; }

    [Parameter] public string? AccountMenuClass { get; set; }

    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    [Parameter] public EventCallback<string> ChatsMenuClassChanged { get; set; }

    [Parameter] public EventCallback<string> AccountMenuClassChanged { get; set; }

    private static class ElementIds
    {
        public static Guid UploadInput { get; } = Guid.NewGuid();
    }

    private string? ImageUrl;

    private int? UploadProgress;

    private bool UploadCancel = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAndSetUserData();
    }

    private async Task SaveChanges()
    {
        await UserService.EditUserAsync(_editUserRequest);
        await JsRuntime.InvokeVoidAsync("MessageShow", "success", "success", "Profile Updated âœ…");
        await GetAndSetUserData();
    }
    private  void DisplayNameChange(ChangeEventArgs e)
    {
        _editUserRequest.FullName = e.Value.ToString();
        StateHasChanged();
    }
    
    private async Task GetAndSetUserData()
    {
        var user = await UserService.GetUserAsync();
        
        if (user.IsSuccess)
        {
            ImageUrl = user.AsSuccess.Value.ProfileImage;
            _editUserRequest.FullName = user.AsSuccess.Value.FullName;
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "error", "there is a problem loading your profile");
        }
    }

    async Task ViewMenuAsync()
    {
        ChatsMenuClass = "-translate-x-0";
        AccountMenuClass = "-translate-x-full";

        await ChatsMenuClassChanged.InvokeAsync(ChatsMenuClass);
        await AccountMenuClassChanged.InvokeAsync(AccountMenuClass);
    }

    private void CancelUpload()
    {
        UploadCancel = true;
    }

    private async Task ImageChanged(InputFileChangeEventArgs inputFile)
    {
        var fileFormat=await JsRuntime.GetInputFileType(ElementIds.UploadInput.ToString());

        ImageUrl= await inputFile.File.GetPreviewUrlAsync(fileFormat);

        UploadCancel = false;
        StateHasChanged();
        
        var tokenResult = await StorageService.GetUploadTokenAsync(new UploadRequest()
        {
            FileFormat = inputFile.File.ContentType.Split("/")[1],
            FileSizeMb = inputFile.File.Size.SizeMB(),
            FileType = FileType.profile
        });

       


        if (tokenResult.IsSuccess)
        {
            var uploadResult= await inputFile.File.UploadChunks(ObjectHelperService, StorageService, tokenResult.AsSuccess.Value.Token, Guid.NewGuid(), StateHasChanged, (x) => UploadProgress=x, UploadCancel);

            if (uploadResult.IsValidationFailure)
            {
                await JsRuntime.ShowErrorAsync(uploadResult.AsValidationFailure.Error);
            }

            if (uploadResult.IsSuccess)
            {
                _editUserRequest.ProfileImageToken = uploadResult.AsSuccess.Value.Token;
            }
        }

        if (tokenResult.IsValidationFailure)
        {
            await JsRuntime.ShowErrorAsync(tokenResult.AsValidationFailure.Error);
        }
        else
        {
            await JsRuntime.ShowErrorAsync("there is an Unknown error");
        }
        
    }
    

}