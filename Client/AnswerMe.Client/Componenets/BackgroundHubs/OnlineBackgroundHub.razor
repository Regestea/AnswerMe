@using Microsoft.AspNetCore.SignalR.Client
@using AnswerMe.Client.Core.DTOs.Base
@using AnswerMe.Client.Core.Extensions
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorageService
@inject AppSettings AppSettings


@code {
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await ConnectToHub();
    }

    private async Task ConnectToHub()
    {
        hubConnection =
            new HubConnectionBuilder()
                .WithUrl(AppSettings.OnlineHub!, option =>
                {
                    option.AccessTokenProvider =
                        async () => { return await LocalStorageService.GetItemAsStringAsync("authToken"); };
                }).Build();

        hubConnection.Closed += OnClosed;

        hubConnection.On<string, string>("UserWentOnline", async (userId) =>
        {
            Console.WriteLine("user went online " + userId);
            await JsRuntime.ReplaceClass(userId+"-Status","offline","online"); 
            return userId;
        });
        
        hubConnection.On<string, string>("UserWentOffline", async (userId) =>
        {
            Console.WriteLine("user went offline " + userId);
            await JsRuntime.ReplaceClass(userId+"-Status","online","offline"); 
            return userId;
        });

        hubConnection.On<Guid, string>("NotifyNewPvMessage", async (roomId, message) =>
        {
            Console.WriteLine("NotifyNewPvMessage"+roomId+message);

            NavMenu.SetPvLastMessage(roomId, message);
            StateHasChanged();
        });
        
        hubConnection.On<Guid, string>("NotifyNewGroupMessage", async (roomId, message) =>
        {
            Console.WriteLine("NotifyNewPvMessage"+roomId+message);

            NavMenu.SetGrLastMessage(roomId, message);
            StateHasChanged();
        });
        
        
        
        try
        {
            await hubConnection.StartAsync();
            
            await JsRuntime.ReplaceClass(NavMenu.ElementIds.HeaderAvatar.ToString(),"offline","online");

            await JsRuntime.SetInnerText(NavMenu.ElementIds.HeaderText.ToString(), "Answer Me");
            
            
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Reconnect();
        }
    }

    private async Task Reconnect()
    {
        await JsRuntime.ReplaceClass(NavMenu.ElementIds.HeaderAvatar.ToString(),"online","offline");

        await JsRuntime.SetInnerText(NavMenu.ElementIds.HeaderText.ToString(), "Connecting .....");
        
        StateHasChanged();
        await Task.Delay(5000);

        await ConnectToHub();
    }

    private async Task OnClosed(Exception exception)
    {
        // Log the disconnection event
        await JsRuntime.ReplaceClass(NavMenu.ElementIds.HeaderAvatar.ToString(),"online","offline");

        await JsRuntime.SetInnerText(NavMenu.ElementIds.HeaderText.ToString(), "Connecting .....");
        StateHasChanged();
        await Task.Delay(5000);
        await ConnectToHub();
    }
}