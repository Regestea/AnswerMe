@* @using Microsoft.AspNetCore.SignalR.Client *@
@* @using System.Net.Http.Headers *@
@* @using AnswerMe.Client.Core.DTOs.Base *@
@* @using AnswerMe.Client.Core.Enums *@
@* @using AnswerMe.Client.Core.Extensions *@
@* @using AnswerMe.Client.Core.Services *@
@* @using Microsoft.AspNetCore.Http.Connections *@
@* @using Models.Shared.Responses.Message *@
@* @inject IUserService UserService *@
@* @inject ILocalStorageService localStorageService *@
@* @inject AppSettings AppSettings *@
@* @implements IAsyncDisposable *@
@* *@
@* *@
@* *@
@* @code { *@
@*     [Parameter] public RoomType RoomType { get; set; } *@
@*     [Parameter] public Guid RoomId { get; set; } *@
@*     [Parameter] public EventCallback<MessageResponse> NewMessage { get; set; } *@
@*     [Parameter] public EventCallback<Guid> UserJoinedRoom { get; set; } *@
@*     [Parameter] public EventCallback<Guid> UserLeftRoom { get; set; } *@
@*     private HubConnection hubConnection; *@
@*     private bool isConnectionClosedIntentionally = false; *@
@*     private bool isFirstTime = true; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await ConnectToHub(); *@
@*     } *@
@* *@
@*     private async Task ConnectToHub() *@
@*     { *@
@*         string url = ""; *@
@*         if (RoomType==RoomType.Private) *@
@*         { *@
@*             url = AppSettings.PrivateRoomHub!; *@
@*         } *@
@* *@
@*         if (RoomType==RoomType.Group) *@
@*         { *@
@*             url=AppSettings.GroupRoomHub!; *@
@*         } *@
@* *@
@*         var urlByQuery = url + $"?RoomId={RoomId}"; *@
@*         hubConnection = *@
@*             new HubConnectionBuilder() *@
@*                 .WithUrl(urlByQuery, option => *@
@*                 { *@
@*                     option.AccessTokenProvider = *@
@*                         async () => { return await localStorageService.GetItemAsStringAsync("authToken"); }; *@
@*                 }).Build(); *@
@* *@
@*         hubConnection.Closed += OnClosed; *@
@* *@
@*         hubConnection.On<MessageResponse>("ReceivePrivateMessage", async (messageResponse) => *@
@*         { *@
@*             await NewMessage.InvokeAsync(messageResponse); *@
@*         }); *@
@* *@
@*         hubConnection.On<Guid>("JoinedRoom", async (userId) => *@
@*         { *@
@*            await UserJoinedRoom.InvokeAsync(userId); *@
@*         }); *@
@* *@
@*         hubConnection.On<Guid>("LeftRoom", async (userId) => *@
@*         { *@
@*             await UserLeftRoom.InvokeAsync(userId); *@
@*         }); *@
@* *@
@*         try *@
@*         { *@
@*             await hubConnection.StartAsync(); *@
@*             // Title = "Answer Me"; *@
@*             // OnlineStatusClass = "online"; *@
@*             StateHasChanged(); *@
@*         } *@
@*         catch (Exception e) *@
@*         { *@
@*             Console.WriteLine(e); *@
@*             if (!isFirstTime) *@
@*             { *@
@*                 await Reconnect(); *@
@*             } *@
@*         } *@
@*     } *@
@* *@
@*     private async Task Reconnect() *@
@*     { *@
@*         // Title = "Connecting ....."; *@
@*         StateHasChanged(); *@
@*         await Task.Delay(5000); *@
@* *@
@*         await ConnectToHub(); *@
@*     } *@
@* *@
@*     private async Task OnClosed(Exception exception) *@
@*     { *@
@*         // Title = "Connecting ....."; *@
@*         // OnlineStatusClass = "offline"; *@
@*         Console.WriteLine(exception); *@
@*         StateHasChanged(); *@
@*         await Task.Delay(5000); *@
@* *@
@*         if (!isConnectionClosedIntentionally) *@
@*         { *@
@*             await Reconnect(); *@
@*         } *@
@*     } *@
@* *@
@* *@
@* *@
@*     public async ValueTask DisposeAsync() *@
@*     { *@
@*         isConnectionClosedIntentionally = true; *@
@*         await hubConnection.StopAsync(); *@
@*         await hubConnection.DisposeAsync(); *@
@*     } *@
@* *@
@* } *@