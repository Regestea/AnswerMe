@using AnswerMe.Client.Core.Extensions
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Group
@inject IGroupInviteService GroupInviteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@if (_previewGroupResponse != null)
{
    <div class="card card-compact w-64 bg-base-100 shadow-xl " style="display: flex;align-items: center">
        <UserAvatar ImageUrl="@_previewGroupResponse.RoomImage" Class="w-24" Letter="@_previewGroupResponse.Name.FirstLetter()"/>
        <div class="card-body">
            <h2 class="card-title">@_previewGroupResponse.Name</h2>
            <div class="card-actions justify-end">
                @if (_previewGroupResponse.ExpirationDate > DateTimeOffset.UtcNow)
                {
                    <button @onclick="JoinGroup" class="btn btn-outline w-full ">Join Group</button>
                }
                else
                {
                    <button  class="btn-disabled btn btn-outline w-full ">Invite Expired</button>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string GroupInviteToken { get; set; }

    private PreviewGroupInviteResponse? _previewGroupResponse = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await GroupInviteService.GetGroupInvitePreviewAsync(new TokenRequest(){Token = GroupInviteToken});

        if (response.IsSuccess)
        {
            _previewGroupResponse = response.AsSuccess.Value;
        }
    }

    private async Task JoinGroup()
    {
        var result= await GroupInviteService.JoinGroupAsync(GroupInviteToken);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo($"/GR/{_previewGroupResponse?.Id}");
        }

        if (result.IsNotFound)
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "NotFound"," ");
        }

        if (result.IsValidationFailureList)
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "error", result.AsValidationFailureList[0].Error);
        }
        
    }

}