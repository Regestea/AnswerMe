@using AnswerMe.Client.Core.Extensions
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Group
@using Models.Shared.Responses.Shared
@inject IGroupService GroupService
@inject AuthStateProvider AuthStateProvider


<ul class="space-y-2 font-medium p-2 rounded-lg bg-base-300 w-full" style="height: 300px;overflow-y: auto">

    @foreach (var user in _users)
    {
        <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:40px ">
            <div class="avatar" style="display: grid">
                <div class="w-16 rounded-full  ring-offset-base-100 ring-offset-2" style="justify-self: center">
                    <UserAvatar Class="w-16" ImageUrl="@user.ProfileImage" Letter="@user.Name?.FirstLetter()"/>

                </div>
            </div>
            <div class="w-full  flex flex-col-reverse">
                <div style="display: grid;margin-top: 15px">
                    <p style="margin-left: 15px;font-size: 12px">@user.Name</p>

                </div>
                <div style="display: grid">
                    <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@user.Name </h1>
                    <div method="dialog" style=" grid-column-end: 12;position: relative">
                        <button class="btn btn-square" style="position: absolute;right: 10px">
                            <svg style="max-width: 30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="Message">
                                <g data-name="Layer 2" fill="#6563ff" class="color000000 svgShape">
                                    <g data-name="message-circle" fill="#6563ff" class="color000000 svgShape">
                                        <rect width="24" height="24" opacity="0" fill="#6563ff" class="color000000 svgShape"></rect><path d="M19.07 4.93a10 10 0 0 0-16.28 11 1.06 1.06 0 0 1 .09.64L2 20.8a1 1 0 0 0 .27.91A1 1 0 0 0 3 22h.2l4.28-.86a1.26 1.26 0 0 1 .64.09 10 10 0 0 0 11-16.28zM8 13a1 1 0 1 1 1-1 1 1 0 0 1-1 1zm4 0a1 1 0 1 1 1-1 1 1 0 0 1-1 1zm4 0a1 1 0 1 1 1-1 1 1 0 0 1-1 1z" fill="#6563ff" class="color000000 svgShape"></path>
                                    </g>
                                </g>
                            </svg>
                        </button>
                        <button @onclick="() => KickUser(user.Id)" class="btn btn-square" style="position: absolute;right: 80px">
                            <svg style="max-width: 30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" id="Kickstarter">
                                <path fill="#f22874" d="m10.379 8 3.471-3.819A2.5 2.5 0 0 0 10.151.817L6 5.384V2.5a2.5 2.5 0 1 0-5 0v11a2.5 2.5 0 1 0 5 0v-2.883l4.15 4.565a2.494 2.494 0 0 0 1.851.818 2.5 2.5 0 0 0 1.849-4.181L10.379 8z" class="color4caf50 svgShape"></path>
                            </svg>
                        </button>
                    </div>
                </div>

            </div>

        </li>
    }
    @if (_showLoadMore)
    {
        <li class="flex " style="border-radius: 0.5em;margin-top:40px ;justify-content: center">
            <button @onclick="LoadMore" class="btn btn-outline btn-accent btn-sm">Load More</button>
        </li>
    }


</ul>

@code {
    [Parameter] public Guid RoomId { get; set; }
    [Parameter] public bool IsGroupAdmin { get; set; }
    private PaginationRequest _paginationRequest = new() { CurrentPage = 1, PageSize = 2 };
    private bool _showLoadMore = true;
    private List<PreviewGroupUserResponse> _users = [];


    protected override async Task OnInitializedAsync()
    {
        var response = await GroupService.UserListAsync(RoomId, _paginationRequest);
        if (response.IsSuccess)
        {
            var result = response.AsSuccess.Value;
            _showLoadMore = result.TotalPages > _paginationRequest.CurrentPage;

            _users = result.Items;
            await RemoveCurrentUser();
            _paginationRequest.CurrentPage = result.Page;
        }
    }

    private async Task RemoveCurrentUser()
    {
        var user = await AuthStateProvider.ExtractUserDataFromLocalTokenAsync();
        var currentUser = _users.SingleOrDefault(x => x.Id == user.id);
        if (currentUser != null)
        {
            _users.Remove(currentUser);
        }
    }

    private async Task LoadMore()
    {
        _paginationRequest.CurrentPage += 1;
        var response = await GroupService.UserListAsync(RoomId, _paginationRequest);
        if (response.IsSuccess)
        {
            var result = response.AsSuccess.Value;
            _users.AddRange(result.Items);
            if (_paginationRequest.CurrentPage == result.TotalPages)
            {
                _showLoadMore = false;
            }

            await RemoveCurrentUser();
        }
    }

    private async Task KickUser(Guid userId)
    {
        var response = await GroupService.KickUserAsync(RoomId, userId);
        if (response.IsSuccess)
        {
        var user = _users.Single(x => x.Id == userId);
        _users.Remove(user);
        StateHasChanged();
        }
    }

}