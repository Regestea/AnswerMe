@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.User
@using AnswerMe.Client.Core.Extensions
@using Models.Shared.Requests.Group
@using Models.Shared.Requests.ObjectStorage
@inject IUserService UserService     
@inject IPrivateRoomService PrivateRoomService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IObjectStorageService StorageService
@inject IObjectHelperService ObjectHelperService
@inject IGroupService GroupService
@inject AuthStateProvider AuthStateProvider


<div @onclick="() => _modalRef.ShowModal()" class="btn avatar" style="position: absolute;bottom: 0;right: 40px; background: none">
    <div class="w-20 rounded-full" style="border-radius: 100px 20px 20px 20px;">
        <svg style="background: linear-gradient(144deg, rgba(116, 128, 255, 1) 0%, rgba(100, 25, 230, 1) 100%);padding: 15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="Pen">
            <path d="m46.242 10.245-4.467 4.467-8.616-8.352 4.599-4.599a5.999 5.999 0 1 1 8.484 8.484zm-7.083 7.08L11.694 44.79 0 48.048l3.207-11.739L30.57 8.946l8.589 8.379z" fill="#f5deb3" class="color000000 svgShape"></path>
        </svg>
    </div>
</div>

<Modal @ref="@_modalRef">
    <Content >
        <div role="tablist" class="tabs tabs-boxed grid grid-cols-2 tab-primary" style="min-height: fit-content">

            <input type="radio" name="my_tabs_44" role="tab" class="tab btn" aria-label="New Contact" style="color: wheat;margin: 5px;border-radius: 15px" checked>
            <div role="tabpanel55" class="tab-content ">

                <div style="display: grid;justify-content: center;margin-bottom: 15px">
                    <input @onkeydown="OnSearch" @bind:event="oninput" @bind="_searchWord" type="text" placeholder="Type here" class="input input-bordered input-primary w-full max-w-xs" style="margin-top: 30px"/>
                </div>

                <ul class="space-y-2 font-medium" style="height: 300px;overflow-y: auto">
                    @if (_users.Count == 0)
                    {
                        <div style="display: grid; justify-content: center;margin-top: 40px;">
                            @if (_showLoading)
                            {
                                <span class="loading loading-dots loading-lg"></span>
                            }
                            else
                            {
                                <h1>Please Search User Id or Phone Number</h1>
                                <img src="Gif/Search.gif" style="width: 200px;height: 200px;justify-self: center"/>
                            }
                        </div>
                    }
                    else
                    {
                        @foreach (var user in _users)
                        {
                            <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:40px ">
                                <div class="avatar" style="display: grid">
                                    <div class="w-16 rounded-full  ring-offset-base-100 ring-offset-2" style="justify-self: center">
                                        <UserAvatar Class="w-16" ImageUrl="@user.ProfileImage" Letter="@user.FullName?.FirstLetter()"/>

                                    </div>
                                </div>
                                <div class="w-full  flex flex-col-reverse">
                                    <div style="display: grid;margin-top: 15px">
                                        <p style="margin-left: 15px;font-size: 12px">@user.PhoneNumber</p>

                                    </div>
                                    <div style="display: grid">
                                        <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@user.IdName </h1>
                                        <form method="dialog" style=" grid-column-end: 12;position: relative">
                                            <button @onclick="() => StartMessage(user.id)" class="btn btn-square" style="position: absolute;right: 10px">
                                                <svg style="max-width: 30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="Message">
                                                    <g data-name="Layer 2" fill="#6563ff" class="color000000 svgShape">
                                                        <g data-name="message-circle" fill="#6563ff" class="color000000 svgShape">
                                                            <rect width="24" height="24" opacity="0" fill="#6563ff" class="color000000 svgShape"></rect><path d="M19.07 4.93a10 10 0 0 0-16.28 11 1.06 1.06 0 0 1 .09.64L2 20.8a1 1 0 0 0 .27.91A1 1 0 0 0 3 22h.2l4.28-.86a1.26 1.26 0 0 1 .64.09 10 10 0 0 0 11-16.28zM8 13a1 1 0 1 1 1-1 1 1 0 0 1-1 1zm4 0a1 1 0 1 1 1-1 1 1 0 0 1-1 1zm4 0a1 1 0 1 1 1-1 1 1 0 0 1-1 1z" fill="#6563ff" class="color000000 svgShape"></path>
                                                        </g>
                                                    </g>
                                                </svg>
                                            </button>
                                        </form>
                                    </div>

                                </div>

                            </li>
                        }

                        @if (_showLoadMore)
                        {
                            <li class="flex " style="border-radius: 0.5em;margin-top:40px ;justify-content: center">
                                <button @onclick="LoadMore" class="btn btn-outline btn-accent btn-sm">Load More</button>
                            </li>
                        }
                    }

                </ul>

            </div>

            <input type="radio" name="my_tabs_44" role="tab" class="tab btn" aria-label="Create Group" style="color: wheat;margin: 5px;border-radius: 15px"/>
            <div role="tabpanel55" class="tab-content ">
                <div class="card shrink-0 w-full max-w-sm shadow-2xl bg-base-100" style="display:contents">
                    <form class="card-body" style="display:grid;justify-content: center">
                        <div class="form-control mt-6" style="display:grid">
                            <div class="avatar" style="display: grid">
                                <div class="w-24 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2" style="justify-self: center">
                                    <UserAvatar Class="w-24" ImageUrl="@ImageUrl" Letter="@_createGroupRequest.Name?.FirstLetter()"/>
                                </div>
                            </div>
                            @if (UploadProgress != null)
                            {
                                <progress value="@UploadProgress" class="progress progress-primary w-56 mt-12" v max="100" style="justify-self: center"></progress>
                                <button @onclick="CancelUpload" type="button" class="btn btn-outline btn-secondary mt-6">Cancel</button>
                            }
                            else
                            {
                                <InputFile OnChange="ImageChanged" type="file" class="file-input file-input-bordered file-input-primary w-full max-w-xs mt-12 "/>
                            }


                        </div>

                        <div class="form-control mt-6">
                            <label class="label">
                                <span class="label-text">Display Name</span>
                            </label>
                            <input @oninput="GroupLetterChange" type="text" placeholder="Group Name" class="input input-bordered" required/>
                        </div>


                        <form method="dialog" class="form-control mt-6">
                            <button @onclick="SaveChanges" class="btn btn-outline btn-primary">Save</button>

                        </form>

                    </form>
                </div>
            </div>

        </div>


    </Content>
</Modal>


@code {
    private PaginationRequest _paginationRequest = new() { CurrentPage = 1, PageSize = 2 };
    private Modal _modalRef;
    private int _totalPages = 0;
    private List<UserResponse> _users = new();
    private CreateGroupRequest _createGroupRequest = new();
    private bool _showLoading = false;
    private string? ImageUrl;
    private string? _searchWord;
    private int? UploadProgress;
    private bool UploadCancel = false;
    private bool _showLoadMore = true;


    private void GroupLetterChange(ChangeEventArgs e)
    {
        if (e.Value != null) _createGroupRequest.Name = e.Value.ToString() ?? "";
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        _paginationRequest.CurrentPage += 1;
        await Search();
        await RemoveCurrentUser();
    }

    private async Task RemoveCurrentUser()
    {
        var user = await AuthStateProvider.ExtractUserDataFromLocalTokenAsync();
        var currentUser = _users.SingleOrDefault(x => x.id == user.id);
        if (currentUser != null)
        {
            _users.Remove(currentUser);
        }
    }

    private async Task SaveChanges()
    {
        var result = await GroupService.CreateAsync(_createGroupRequest);

        _createGroupRequest = new();

        if (result.IsSuccess)
        {
            var groupId = result.AsSuccess.Value.Id;
            NavigationManager.NavigateTo($"/GR/{groupId}");
            await JsRuntime.InvokeVoidAsync("ResizeComponent");
        }

        if (result.IsValidationFailureList)
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "error", result.AsValidationFailureList[0].Error);
        }
    }

    private async void OnSearch()
    {
        _users = new();
        _paginationRequest.CurrentPage = 1;

        if (_searchWord is { Length: >= 3 })
        {
            _showLoading = true;
            StateHasChanged();

            await Task.Delay(2000);
            await Search();
        }

        _showLoading = false;
        StateHasChanged();
    }

    private async Task Search()
    {
        var searchResult = await UserService.SearchAsync(_searchWord, _paginationRequest);
        if (searchResult.IsSuccess)
        {
            _users.AddRange(searchResult.AsSuccess.Value.Items);


            _paginationRequest.CurrentPage = searchResult.AsSuccess.Value.Page;
            if (_paginationRequest.CurrentPage == searchResult.AsSuccess.Value.TotalPages)
            {
                _showLoadMore = false;
            }
            else
            {
                _showLoadMore = true;
            }

            StateHasChanged();
        }
    }

    private async Task StartMessage(Guid contactId)
    {
        var response = await PrivateRoomService.CreateAsync(contactId);

        if (response.IsSuccess)
        {
            var privateRoomId = response.AsSuccess.Value.Id;
            Console.WriteLine(privateRoomId);
            NavigationManager.NavigateTo($"/PV/{privateRoomId}");
            await JsRuntime.InvokeVoidAsync("ResizeComponent");
        }
        // show a message box that not found
    }

    private void CancelUpload()
    {
        UploadCancel = true;
    }

    private async Task ImageChanged(InputFileChangeEventArgs inputFile)
    {
        ImageUrl = await inputFile.File.GetPreviewUrl();

        UploadCancel = false;
        StateHasChanged();

        var result = await StorageService.GetUploadTokenAsync(new ProfileImageUploadRequest()
        {
            FileFormat = inputFile.File.ContentType.Split("/")[1],
            FileSizeMB = inputFile.File.Size.SizeMB()
        });

        if (result.IsSuccess)
        {
            var chunksCount = ObjectHelperService.CalculateChunkCount(inputFile.File.Size.SizeMB());
            var chunkPercentage = 100 / chunksCount;
            var maxFileSize = unchecked(1024 * 1024 * 20);
            await using var filestream = inputFile.File.OpenReadStream(maxFileSize);


            UploadProgress = 0;
            StateHasChanged();

            await foreach (var chunk in ObjectHelperService.GetStreamChunksAsync(filestream, chunksCount))
            {
                if (UploadCancel)
                {
                    break;
                }

                var fileChunkRequest = new FileChunkRequest()
                {
                    Data = chunk.ToArray(),
                    UploadToken = Guid.Parse(result.AsSuccess.Value.Token)
                };

                var chunkUploadResponse = await StorageService.UploadChunkAsync(fileChunkRequest);

                UploadProgress += (1 * chunkPercentage);
                StateHasChanged();
            }

            if (!UploadCancel)
            {
                var fileTokenResponse = await StorageService.FinalizeUploadAsync(result.AsSuccess.Value.Token);
                if (fileTokenResponse.IsSuccess)
                {
                    _createGroupRequest.ImageToken = fileTokenResponse.AsSuccess.Value.Token;
                }

                if (fileTokenResponse.IsValidationFailureList)
                {
                    await JsRuntime.InvokeVoidAsync("ValidationMessageBox", fileTokenResponse.AsValidationFailureList);
                }
            }

            UploadProgress = null;
            StateHasChanged();
        }

        if (result.IsValidationFailureList)
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "error", result.AsValidationFailureList[0].Error);
        }
    }

}