@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.User
@using AnswerMe.Client.Core.Extensions
@using Models.Shared.Requests.Group
@using Models.Shared.Requests.ObjectStorage
@inject IUserService UserService     
@inject IPrivateRoomService PrivateRoomService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IObjectStorageService StorageService
@inject IObjectHelperService ObjectHelperService
@inject IGroupService GroupService

<div onclick="NewMessage.showModal()" class="btn avatar" style="position: absolute;bottom: 0;right: 40px; background: none">
    <div class="w-20 rounded-full" style="border-radius: 100px 20px 20px 20px;">
        <svg style="background: linear-gradient(144deg, rgba(116, 128, 255, 1) 0%, rgba(100, 25, 230, 1) 100%);padding: 15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="Pen">
            <path d="m46.242 10.245-4.467 4.467-8.616-8.352 4.599-4.599a5.999 5.999 0 1 1 8.484 8.484zm-7.083 7.08L11.694 44.79 0 48.048l3.207-11.739L30.57 8.946l8.589 8.379z" fill="#f5deb3" class="color000000 svgShape"></path>
        </svg>
    </div>
</div>

<dialog id="NewMessage" class="modal">
    <div class="modal-box w-11/12 max-w-2xl">
        <div class="modal-action" style="margin: 10px">
            <form method="dialog">
                <!-- if there is a button, it will close the modal -->
                <button class="btn btn-circle">
                    <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" id="Close">
                        <path d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M15.7,14.3c0.4,0.4,0.4,1,0,1.4c-0.4,0.4-1,0.4-1.4,0
                            	L12,13.4l-2.3,2.3c-0.4,0.4-1,0.4-1.4,0c-0.4-0.4-0.4-1,0-1.4l2.3-2.3L8.3,9.7c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0l2.3,2.3
                            	l2.3-2.3c0.4-0.4,1-0.4,1.4,0c0.4,0.4,0.4,1,0,1.4L13.4,12L15.7,14.3z" fill="#717af7" class="color000000 svgShape"></path>
                    </svg>
                </button>
            </form>
        </div>

        <div class="h-full px-3 pb-4 overflow-y-auto ">
            <div role="tablist" class="tabs tabs-boxed grid grid-cols-2 tab-primary" style="min-height: fit-content">

                <input type="radio" name="my_tabs_44" role="tab" class="tab btn" aria-label="New Contact" style="color: wheat;margin: 5px;border-radius: 15px" checked>
                <div role="tabpanel55" class="tab-content ">

                    <div style="display: grid;justify-content: center;margin-bottom: 15px">
                        <input @onkeydown="OnSearch" @bind:event="oninput" @bind="_searchWord" type="text" placeholder="Type here" class="input input-bordered input-primary w-full max-w-xs" style="margin-top: 30px"/>
                    </div>

                    <ul class="space-y-2 font-medium" style="height: 300px;overflow-y: auto">
                        @if (_users.Count == 0)
                        {
                            <div style="display: grid; justify-content: center;margin-top: 40px;">
                                @if (_showLoading)
                                {
                                    <span class="loading loading-dots loading-lg"></span>
                                }
                                else
                                {
                                    <h1>Please Search User Id or Phone Number</h1>
                                    <img src="Gif/Search.gif" style="width: 200px;height: 200px;justify-self: center"/>
                                }
                            </div>
                        }
                        else
                        {
                            @foreach (var user in _users)
                            {
                                <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:40px ">
                                    <div class="avatar" style="display: grid">
                                        <div class="w-16 rounded-full  ring-offset-base-100 ring-offset-2" style="justify-self: center">
                                            <UserAvatar Class="w-16" ImageUrl="@user.ProfileImage" Letter="@user.FullName?.FirstLetter()"/>

                                        </div>
                                    </div>
                                    <div class="w-full  flex flex-col-reverse">
                                        <div style="display: grid;margin-top: 15px">
                                            <p style="margin-left: 15px;font-size: 12px">@user.PhoneNumber</p>

                                        </div>
                                        <div style="display: grid">
                                            <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@user.IdName </h1>
                                            <form method="dialog" style=" grid-column-end: 12;position: relative">
                                                <button @onclick="() => StartMessage(user.id)" class="btn btn-square" style="position: absolute;right: 10px">
                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="message">
                                                        <path fill="url(#paint0_linear_1_13112)" fill-rule="evenodd" d="M20.455 4.73005C21 5.79961 21 7.19974 21 10V12.6988C21 12.9785 21 13.1183 20.9944 13.2364C20.8725 15.812 18.812 17.8725 16.2364 17.9944C16.1183 18 15.9623 18 15.6504 18L15.5703 18.0001C14.5501 18.0066 13.5562 18.3251 12.7222 18.9128L12.6692 18.9506L10.0585 20.8154C9.1635 21.4546 7.98743 20.5314 8.3959 19.5103C8.68525 18.7869 8.15251 18 7.37341 18H6.77166C4.68863 18 3 16.3114 3 14.2283V10C3 7.19974 3 5.79961 3.54497 4.73005C4.02433 3.78924 4.78924 3.02433 5.73005 2.54497C6.79961 2 8.19974 2 11 2H13C15.8003 2 17.2004 2 18.27 2.54497C19.2108 3.02433 19.9757 3.78924 20.455 4.73005ZM8 7.25C7.58579 7.25 7.25 7.58579 7.25 8C7.25 8.41421 7.58579 8.75 8 8.75H16C16.4142 8.75 16.75 8.41421 16.75 8C16.75 7.58579 16.4142 7.25 16 7.25H8ZM8 11.75C7.58579 11.75 7.25 12.0858 7.25 12.5C7.25 12.9142 7.58579 13.25 8 13.25H16C16.4142 13.25 16.75 12.9142 16.75 12.5C16.75 12.0858 16.4142 11.75 16 11.75H8Z" clip-rule="evenodd"></path>
                                                        <defs>
                                                            <linearGradient id="paint0_linear_1_13112" x1="12" x2="12" y1="2" y2="21.026" gradientUnits="userSpaceOnUse">
                                                                <stop stop-color="#6622e8" class="stopColor834d9b svgShape"></stop><stop offset="1" stop-color="#717af8" class="stopColord04ed6 svgShape"></stop>
                                                            </linearGradient>
                                                        </defs>
                                                    </svg>
                                                </button>
                                            </form>
                                        </div>

                                    </div>

                                </li>
                            }

                            <li class="flex " style="border-radius: 0.5em;margin-top:40px ;justify-content: center">
                                <button @onclick="LoadMore" class="btn btn-outline btn-accent btn-sm">Load More</button>
                            </li>
                        }

                    </ul>

                </div>

                <input type="radio" name="my_tabs_44" role="tab" class="tab btn" aria-label="Create Group" style="color: wheat;margin: 5px;border-radius: 15px"/>
                <div role="tabpanel55" class="tab-content ">
                    <div class="card shrink-0 w-full max-w-sm shadow-2xl bg-base-100" style="display:contents">
                        <form class="card-body" style="display:grid;justify-content: center">
                            <div class="form-control mt-6" style="display:grid">
                                <div class="avatar" style="display: grid">
                                    <div class="w-24 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2" style="justify-self: center">
                                        <UserAvatar Class="w-24" ImageUrl="@ImageUrl" Letter="@_createGroupRequest.Name?.FirstLetter()"/>
                                    </div>
                                </div>
                                @if (UploadProgress != null)
                                {
                                    <progress value="@UploadProgress" class="progress progress-primary w-56 mt-12" v max="100" style="justify-self: center"></progress>
                                    <button @onclick="CancelUpload" type="button" class="btn btn-outline btn-secondary mt-6">Cancel</button>
                                }
                                else
                                {
                                    <InputFile OnChange="ImageChanged" type="file" class="file-input file-input-bordered file-input-primary w-full max-w-xs mt-12 "/>
                                }


                            </div>

                            <div class="form-control mt-6">
                                <label class="label">
                                    <span class="label-text">Display Name</span>
                                </label>
                                <input @oninput="GroupLetterChange" type="text" placeholder="Group Name" class="input input-bordered" required/>
                            </div>


                            <form method="dialog" class="form-control mt-6">
                                <button @onclick="SaveChanges" class="btn btn-outline btn-primary">Save</button>

                            </form>

                        </form>
                    </div>
                </div>

            </div>
        </div>


    </div>
</dialog>

@code {
    private PaginationRequest _paginationRequest = new() { CurrentPage = 1, PageSize = 2 };
    private int _totalPages = 0;
    private List<UserResponse> _users = new();
    private CreateGroupRequest _createGroupRequest = new();
    private bool _showLoading = false;
    private string? ImageUrl;
    private string? _searchWord;
    private int? UploadProgress;
    private bool UploadCancel = false;
    

    private void GroupLetterChange(ChangeEventArgs e)
    {
        if (e.Value != null) _createGroupRequest.Name = e.Value.ToString() ?? "";
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        _paginationRequest.CurrentPage += 1;
        await Search();
    }

    private async Task SaveChanges()
    {
        var result = await GroupService.CreateAsync(_createGroupRequest);

        _createGroupRequest = new();

        if (result.IsSuccess)
        {
            var groupId = result.AsSuccess.Value.Id;
            NavigationManager.NavigateTo("/Counter");
            await JsRuntime.InvokeVoidAsync("ResizeComponent");
            //go to group chat
        }

        if (result.IsValidationFailureList)
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "error", result.AsValidationFailureList[0].Error);
        }
    }

    private async void OnSearch()
    {
        _users = new();
        _paginationRequest.CurrentPage = 1;

        if (_searchWord is { Length: >= 3 })
        {
            _showLoading = true;
            StateHasChanged();

            await Task.Delay(2000);
            await Search();
        }

        _showLoading = false;
        StateHasChanged();
    }

    private async Task Search()
    {
        var searchResult = await UserService.SearchAsync(_searchWord, _paginationRequest);
        if (searchResult.IsSuccess)
        {
            foreach (var user in searchResult.AsSuccess.Value.Items)
            {
                var exist =_users.Any(x => x.id == user.id);
                if (!exist)
                {
                    _users.Add(user);
                }
                
            }
            _paginationRequest.CurrentPage = searchResult.AsSuccess.Value.Page;
            StateHasChanged();
        }
    }

    private async Task StartMessage(Guid contactId)
    {
        var response = await PrivateRoomService.CreateAsync(contactId);

        if (response.IsSuccess)
        {
            var privateRoomId = response.AsSuccess.Value.Id;
            Console.WriteLine(privateRoomId);
            NavigationManager.NavigateTo($"/PV/{privateRoomId}");
            await JsRuntime.InvokeVoidAsync("ResizeComponent");
            //redirect to chat component
        }
        // show a message box that not found
    }

    private void CancelUpload()
    {
        UploadCancel = true;
    }

    private async Task ImageChanged(InputFileChangeEventArgs inputFile)
    {
        ImageUrl = await inputFile.File.GetPreviewUrl();

        UploadCancel = false;
        StateHasChanged();

        var result = await StorageService.GetUploadTokenAsync(new ProfileImageUploadRequest()
        {
            FileFormat = inputFile.File.ContentType.Split("/")[1],
            FileSizeMB = inputFile.File.Size.SizeMB()
        });

        if (result.IsSuccess)
        {
            var chunksCount = ObjectHelperService.CalculateChunkCount(inputFile.File.Size.SizeMB());
            var chunkPercentage = 100 / chunksCount;
            var maxFileSize = unchecked(1024 * 1024 * 20);
            await using var filestream = inputFile.File.OpenReadStream(maxFileSize);


            UploadProgress = 0;
            StateHasChanged();

            await foreach (var chunk in ObjectHelperService.GetStreamChunksAsync(filestream, chunksCount))
            {
                if (UploadCancel)
                {
                    break;
                }

                var fileChunkRequest = new FileChunkRequest()
                {
                    Data = chunk.ToArray(),
                    UploadToken = Guid.Parse(result.AsSuccess.Value.Token)
                };

                var chunkUploadResponse = await StorageService.UploadChunkAsync(fileChunkRequest);

                UploadProgress += (1 * chunkPercentage);
                StateHasChanged();
            }

            if (!UploadCancel)
            {
                var fileTokenResponse = await StorageService.FinalizeUploadAsync(result.AsSuccess.Value.Token);
                if (fileTokenResponse.IsSuccess)
                {
                    _createGroupRequest.ImageToken = fileTokenResponse.AsSuccess.Value.Token;
                }

                if (fileTokenResponse.IsValidationFailureList)
                {
                    await JsRuntime.InvokeVoidAsync("ValidationMessageBox", fileTokenResponse.AsValidationFailureList);
                }
            }

            UploadProgress = null;
            StateHasChanged();
        }

        if (result.IsValidationFailureList)
        {
            await JsRuntime.InvokeVoidAsync("MessageShow", "error", "error", result.AsValidationFailureList[0].Error);
        }
    }

}