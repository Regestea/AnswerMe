@inject IJSRuntime JsRuntime
@using AnswerMe.Client.Core.AnimationLibrary
@implements IAsyncDisposable


<div  id="@ElementIds.ChatScroll" class="p-4 pt-0 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700 chat-area responsive-chat-area border-t-0 @Animations.FadeIn  @Class" style="border-bottom: none;height: 83%;max-height: 600px; margin-bottom: 70px; @Style">

    @ChatContent

</div>



@code {

    [Parameter] public required RenderFragment ChatContent { get; set; }
    [Parameter] public  EventCallback CallLoadNewMessages { get; set; }
    [Parameter] public  EventCallback CallLoadOldMessages { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public string? Class { get; set; }

    internal static class ElementIds
    {
        public static Guid ChatScroll { get; } = Guid.NewGuid();
    }

    private class ScrollStatus
    {
        public double ScrollTop { get; set; }
        public double ScrollLeft { get; set; }
        public double ScrollHeight { get; set; }
        public double ClientHeight { get; set; }
    }

    [JSInvokable("LoadNewMessages")]
    public  async Task LoadNewMessages()
    {
        await JsRuntime.InvokeVoidAsync("SaveChatLocation",ElementIds.ChatScroll);
        await CallLoadNewMessages.InvokeAsync();
        await JsRuntime.InvokeVoidAsync("RestoreChatLocation",ElementIds.ChatScroll);
    }

    [JSInvokable("LoadOldMessages")]
    public  async Task LoadOldMessages()
    {
        await JsRuntime.InvokeVoidAsync("SaveChatLocation",ElementIds.ChatScroll);
        await CallLoadOldMessages.InvokeAsync();
        await JsRuntime.InvokeVoidAsync("RestoreChatLocation",ElementIds.ChatScroll);
    }

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("SetScrollListenerLockStatus", false);
            await JsRuntime.InvokeVoidAsync("RegisterChatScrollListener", ElementIds.ChatScroll);
            
            await base.OnAfterRenderAsync(firstRender);
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        await JsRuntime.InvokeVoidAsync("SetScrollListenerLockStatus", true);
        await JsRuntime.InvokeVoidAsync("UnRegisterChatScrollListener", ChatLayout.ElementIds.ChatScroll);
    }

}