@using Models.Shared.Responses.Message
@using AnswerMe.Client.Core.Services
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Shared
@using Models.Shared.Responses.Media
@using AnswerMe.Client.Components.Media
@using AnswerMe.Client.Core.Enums
@inject IGroupMessageService GroupMessageService
@inject AuthStateProvider AuthStateProvider
@inject IUserService UserService
@inject IGroupService GroupService
@inject IJSRuntime JsRuntime
@inject GrHubService GrHubService

<div class="chat-content mb-60">

    @foreach (var message in _messageList)
    {
        if (UserLastRoomVisit != null && message.CreatedDate > UserLastRoomVisit && _isNewMessageBannerPlaced == false)
        {
            _isNewMessageBannerPlaced = true;

            <div id="@ElementIds.NewMessageBanner" class="divider divider-info text-info">New Messages</div>
        }


        <div id="@message.id-message" class="chat  @(message.UserSender.Id == LoggedInUserId ? "chat-end" : "chat-start")">
            @if (message.UserSender.Id != LoggedInUserId)
            {
                <div class="chat-image avatar">
                    <div class="w-10 rounded-full">
                        <UserAvatar Class="w-10" Letter="@message.UserSender.Name.FirstLetter()" ImageUrl="@message.UserSender.ProfileImage"/>
                    </div>
                </div>
            }


            <div class="chat-bubble @(message.UserSender.Id == LoggedInUserId ? "primary-liner-gradient" : "dark-liner-gradient")">

                @if (!string.IsNullOrWhiteSpace(message.GroupInviteToken))
                {
                <GroupInvitePreview @key="@message.GroupInviteToken" GroupInviteToken="@message.GroupInviteToken"/>
                }
                
                @if (message.ReplyMessageId != null)
                {
                    <ReplayedMessage RoomType="RoomType.Group" ReplayedMessageId="(Guid)message.ReplyMessageId"/>
                }

                @if (message.UserSender.Id != LoggedInUserId)
                {
                    <div class="chat-header text-neutral-content/90 ">

                        @message.UserSender.Name

                    </div>
                }


              
                @if (message.MediaList != null && message.MediaList.Any())
                {
                    @foreach (var media in message.MediaList)
                    {
                        switch (media.Type)
                        {
                            case MediaTypeResponse.audio:
                                <div @onclick="() => OpenAudio.InvokeAsync(media.Path)">
                                    <AudioFile Url="@media.Path" Name="@media.FileName"/>
                                </div>
                                break;
                            case MediaTypeResponse.video:
                                <VideoFile Media="media"/>
                                break;
                            case MediaTypeResponse.other:
                                <div>
                                    <OtherFile Url="@media.Path" Name="@media.FileName"/>
                                </div>
                                break;
                        }
                    }

                    @if (message.MediaList.Any(x => x.Type == MediaTypeResponse.image || x.Type == MediaTypeResponse.gif))
                    {
                        <ImageGallery MediaList="@message.MediaList.Where(x => x.Type == MediaTypeResponse.image || x.Type == MediaTypeResponse.gif).ToList()"/>
                    }
                }

                <div @onclick="() => OpenMessageToolsMenu(message.id)">
                    @message.Text
                </div>

                <MessageFooter RoomType="RoomType.Group" MessageCreateDate="@message.CreatedDate"/>
            </div>
        </div>
    }


</div>
<MessageToolsMenu DeleteMessage="DeleteMessage" ReplayMessage="(id) => ReplayMessage.InvokeAsync(id)" EditMessage="(id) => EditMessage.InvokeAsync(id)" CopyMessage="CopyMessage" @ref="_messageToolsMenuRef"/>

@code {
    [Parameter] public Guid RoomId { get; set; }
    [Parameter] public DateTimeOffset? UserLastRoomVisit { get; set; }
    [Parameter] public Guid LoggedInUserId { get; set; }
    [Parameter] public EventCallback<string> OpenAudio { get; set; }
    [Parameter] public EventCallback<Guid> ReplayMessage { get; set; }
    [Parameter] public EventCallback<Guid> EditMessage { get; set; }
    private Modal? _videoPlayerModal;
    private List<MessageResponse> _messageList = new();

    private MessageToolsMenu? _messageToolsMenuRef;

    internal static class ElementIds
    {
        public static string NewMessageBanner { get; } = Guid.NewGuid().ToString();
    }


    private PaginationRequest _oldMessagePaginationRequest = new() { PageSize = 10, CurrentPage = 1 };
    private PaginationRequest _newMessagePaginationRequest = new() { PageSize = 10, CurrentPage = 1 };


    private bool _firstLoad = true;
    private bool _isNewMessageBannerPlaced = false;


    protected override async Task OnInitializedAsync()
    {
        var group = await GroupService.GetByIdAsync(RoomId);

        if (!group.IsSuccess)
        {
            //redirect to 404 page
        }

        var result = await GroupMessageService.GetGroupMessagesAsync(RoomId, _firstLoad, _newMessagePaginationRequest);
        if (result.IsSuccess)
        {
            _messageList = result.AsSuccess.Value.Items;
            _newMessagePaginationRequest.CurrentPage = result.AsSuccess.Value.Pagination.CurrentPage;
            _oldMessagePaginationRequest.CurrentPage = result.AsSuccess.Value.Pagination.CurrentPage;

            await CalculateDisableLoadMessage(result.AsSuccess.Value.Pagination);
        }

        if (result.IsNotFound)
        {
            await CalculateDisableLoadMessage(null);
        }

        if (result.IsAccessDenied)
        {
        }

        GrHubService.NewGrMessage(AddNewMessage);
        GrHubService.EditGrMessage(UpdateMessage);
        GrHubService.RemoveGrMessage(RemoveMessage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstLoad && _isNewMessageBannerPlaced == false && _messageList.Any())
        {
            await JsRuntime.ScrollToEndAsync(ChatLayout.ElementIds.ChatScroll.ToString());
            _firstLoad = false;
        }
        else
        {
            if (_isNewMessageBannerPlaced && _messageList.Count() > _newMessagePaginationRequest.PageSize)
            {
                await JsRuntime.ScrollToViewAsync(ElementIds.NewMessageBanner.ToString());
            }
        }
    }

    private async Task OpenMessageToolsMenu(Guid messageId)
    {
        await _messageToolsMenuRef?.OpenMenuAsync(messageId)!;
    }

    private async Task CalculateDisableLoadMessage(PaginationResponse? pagination)
    {
        if (pagination != null)
        {
            if (pagination.TotalPages == pagination.CurrentPage || pagination.TotalCount == 0)
            {
                await JsRuntime.InvokeVoidAsync("DisableLoadOldMessage");
            }

            if (pagination.TotalPages <= 1)
            {
                await JsRuntime.InvokeVoidAsync("DisableLoadOldMessage");
                await JsRuntime.InvokeVoidAsync("DisableLoadNewMessage");
            }

            if (pagination.CurrentPage == 1)
            {
                await JsRuntime.InvokeVoidAsync("DisableLoadNewMessage");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("DisableLoadOldMessage");
            await JsRuntime.InvokeVoidAsync("DisableLoadNewMessage");
        }
    }

    public async Task LoadNewMessagesAsync()
    {
        if (_newMessagePaginationRequest.CurrentPage > 1)
        {
            _newMessagePaginationRequest.CurrentPage--;
            var result = await GroupMessageService.GetGroupMessagesAsync(RoomId, false, _newMessagePaginationRequest);

            if (result.IsSuccess)
            {
                await CalculateDisableLoadMessage(result.AsSuccess.Value.Pagination);
            }

            if (result.IsSuccess && result.AsSuccess.Value.Items.Any())
            {
                _messageList.AddRange(result.AsSuccess.Value.Items);
            }
        }
    }

    public async Task LoadOldMessagesAsync()
    {
        _oldMessagePaginationRequest.CurrentPage++;

        var result = await GroupMessageService.GetGroupMessagesAsync(RoomId, false, _oldMessagePaginationRequest);

        if (result.IsSuccess)
        {
            await CalculateDisableLoadMessage(result.AsSuccess.Value.Pagination);
        }

        if (result.IsSuccess && result.AsSuccess.Value.Items.Any())
        {
            _messageList.InsertRange(0, result.AsSuccess.Value.Items);
        }
    }


    private void AddNewMessage(MessageResponse messageResponse)
    {
        _isNewMessageBannerPlaced = true;
        if (_newMessagePaginationRequest.CurrentPage == 1)
        {
            var messageClass = "";
            if (messageResponse.UserSender.Id == LoggedInUserId)
            {
                messageClass = "backInRight";
            }
            else
            {
                messageClass = "backInLeft";
            }

            _messageList.Add(messageResponse);
            StateHasChanged();
            _ = JsRuntime.AddClassAsync(messageResponse.id + "-message", messageClass);
        }
    }

    private void RemoveMessage(IdResponse messageId)
    {
        var message = _messageList.FirstOrDefault(x => x.id == messageId.Id);
        if (message != null)
        {
            _messageList.Remove(message);
            StateHasChanged();
        }
    }

    private void UpdateMessage(MessageResponse messageResponse)
    {
        var isExist = _messageList.Any(x => x.id == messageResponse.id);
        if (isExist)
        {
            _messageList.First(x => x.id == messageResponse.id).Text = messageResponse.Text;
            StateHasChanged();
        }
    }

    private async Task CopyMessage(Guid messageId)
    {
        var text = _messageList.FirstOrDefault(x => x.id == messageId)?.Text;
        if (!string.IsNullOrWhiteSpace(text))
        {
            await JsRuntime.CopyToClipboardAsync(text);
        }
    }

    private async Task DeleteMessage(Guid messageId)
    {
        await GroupMessageService.DeleteMessageAsync(messageId);
    }

}