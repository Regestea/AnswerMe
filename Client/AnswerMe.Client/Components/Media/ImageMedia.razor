@using Models.Shared.Responses.Media
@inject ILocalStorageService LocalStorage

@if (_imageModel != null)
{
    @if (_imageModel.IsDownload)
    {
        
        <div class="relative group w-full">
            <img src="@_imageModel.Url" alt="Image" class="w-full rounded-lg" />
            <div class="absolute inset-0 bg-gray-800 bg-opacity-80 flex justify-center items-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <svg @onclick="()=>OpenGallery.InvokeAsync()" class="w-12" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="full-screen">
                    <defs>
                        <linearGradient id="gradient10" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" stop-color="rgba(130, 145, 255, 1)" />
                            <stop offset="100%" stop-color="rgba(110, 30, 235, 1)" />
                        </linearGradient>
                    </defs>
                    <path d="M7 22h2c.6 0 1-.4 1-1s-.4-1-1-1H7c-1.1 0-2-.9-2-2v-2c0-.6-.4-1-1-1s-1 .4-1 1v2c0 2.2 1.8 4 4 4zm8 0h2c2.2 0 4-1.8 4-4v-2c0-.6-.4-1-1-1s-1 .4-1 1v2c0 1.1-.9 2-2 2h-2c-.6 0-1 .4-1 1s.4 1 1 1zm0-17h2c1.1 0 2 .9 2 2v2c0 .6.4 1 1 1s1-.4 1-1V7c0-2.2-1.8-4-4-4h-2c-.6 0-1 .4-1 1s.4 1 1 1zM4 10c.6 0 1-.4 1-1V7c0-1.1.9-2 2-2h2c.6 0 1-.4 1-1s-.4-1-1-1H7C4.8 3 3 4.8 3 7v2c0 .6.4 1 1 1z" fill="url(#gradient10)"></path>
                </svg>

            </div>
        </div>
    }
    else
    {

        <div class="relative group w-full">
            <img src="@_imageModel.BlurHashUrl" alt="Image" class="w-full rounded-lg" />
            <div class="absolute inset-0 bg-gray-800 bg-opacity-80 flex justify-center items-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <svg @onclick="SetImageLoaderStatus" class="w-12" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="DownloadFromCloud">
                        <defs>
                            <linearGradient id="gradient20" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" stop-color="rgba(130, 145, 255, 1)" />
                                <stop offset="50%" stop-color="rgba(110, 30, 235, 1)" />
                                <stop offset="100%" stop-color="rgba(90, 20, 210, 1)" />
                            </linearGradient>
                        </defs>
                        <g fill="url(#gradient20)">
                            <rect width="24" height="24" opacity="0"></rect>
                            <path d="M21.9 11c0-.11-.06-.22-.09-.33a4.17 4.17 0 0 0-.18-.57c-.05-.12-.12-.24-.18-.37s-.15-.3-.24-.44S21 9.08 21 9s-.2-.25-.31-.37-.21-.2-.32-.3L20 8l-.36-.24a3.68 3.68 0 0 0-.44-.23l-.39-.18a4.13 4.13 0 0 0-.5-.15 3 3 0 0 0-.41-.09h-.18A6 6 0 0 0 6.33 7h-.18a3 3 0 0 0-.41.09 4.13 4.13 0 0 0-.5.15l-.39.18a3.68 3.68 0 0 0-.44.23L4.05 8l-.37.31c-.11.1-.22.19-.32.3s-.21.25-.31.37-.18.23-.26.36-.16.29-.24.44-.13.25-.18.37a4.17 4.17 0 0 0-.18.57c0 .11-.07.22-.09.33A5.23 5.23 0 0 0 2 12a5.5 5.5 0 0 0 .09.91c0 .1.05.19.07.29a5.58 5.58 0 0 0 .18.58l.12.29a5 5 0 0 0 .3.56l.14.22a.56.56 0 0 0 .05.08L3 15a5 5 0 0 0 4 2 2 2 0 0 1 .59-1.41A2 2 0 0 1 9 15a1.92 1.92 0 0 1 1 .27V12a2 2 0 0 1 4 0v3.37a2 2 0 0 1 1-.27 2.05 2.05 0 0 1 1.44.61A2 2 0 0 1 17 17a5 5 0 0 0 4-2l.05-.05a.56.56 0 0 0 .05-.08l.14-.22a5 5 0 0 0 .3-.56l.12-.29a5.58 5.58 0 0 0 .18-.58c0-.1.05-.19.07-.29A5.5 5.5 0 0 0 22 12a5.23 5.23 0 0 0-.1-1z"></path>
                            <path d="M14.31 16.38L13 17.64V12a1 1 0 0 0-2 0v5.59l-1.29-1.3a1 1 0 0 0-1.42 1.42l3 3A1 1 0 0 0 12 21a1 1 0 0 0 .69-.28l3-2.9a1 1 0 1 0-1.38-1.44z"></path>
                        </g>
                    </svg>
            </div>
        </div>
    }
}

@code {
    [Parameter] 
    public required MediaResponse Media { get; set; }
    [Parameter] public EventCallback OpenGallery { get; set; }

    private ImageModel? _imageModel;

    protected override async Task OnParametersSetAsync()
    {
        var shouldLoad=await LocalStorage.GetItemAsync<bool>(Media.Id.ToString());
        _imageModel = new()
        {
            Url = Media.Path,
            BlurHashUrl = FileExtension.ConvertBlurHashToBase64(Media.BlurHash),
            FileName = Media.FileName,
            IsDownload = shouldLoad
        };
    }

    private async Task SetImageLoaderStatus()
    {
        if (_imageModel != null) _imageModel.IsDownload = true;
        await LocalStorage.SetItemAsync(Media.Id.ToString(), true);
    }

}