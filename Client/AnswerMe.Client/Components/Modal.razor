@inject IJSRuntime JsRuntime

<dialog id="@ElementIds.Modal" class="modal">
    <div class="modal-box w-11/12 max-w-2xl ">
        <div class="modal-action" style="margin: 10px">
            <form id="@ElementIds.ModalClose" method="dialog">
                <!-- if there is a button, it will close the modal -->
                <button @onclick="CloseModal" class="btn btn-circle">
                    <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" id="Close">
                        <defs>
                            <linearGradient id="gradient4" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" stop-color="rgba(130, 145, 255, 1)" />
                                <stop offset="100%" stop-color="rgba(110, 30, 235, 1)" />
                            </linearGradient>
                        </defs>
                        <path d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M15.7,14.3c0.4,0.4,0.4,1,0,1.4c-0.4,0.4-1,0.4-1.4,0
        	L12,13.4l-2.3,2.3c-0.4,0.4-1,0.4-1.4,0c-0.4-0.4-0.4-1,0-1.4l2.3-2.3L8.3,9.7c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0l2.3,2.3
        	l2.3-2.3c0.4-0.4,1-0.4,1.4,0c0.4,0.4,0.4,1,0,1.4L13.4,12L15.7,14.3z" fill="url(#gradient4)" class="color000000 svgShape"></path>
                    </svg>

                </button>
            </form>
        </div>

        <div class="h-full px-3 pb-4 overflow-y-auto @Class">
           @if (_shouldRender)
           {
               <div class="animate__animated animate__fadeIn">
                   @Content
               </div>
           }
        </div>

    </div>
</dialog>

@code {
    [Parameter]
    public  RenderFragment? Content { get; set; }
    [Parameter] 
    public string? Class { get; set; }
    private bool _shouldRender = false;

    public class ElementIdsModel
    {
        public  Guid Modal { get; } = Guid.NewGuid();
        public  Guid ModalClose { get; } = Guid.NewGuid();
    }

    public ElementIdsModel ElementIds { get; } = new();

    protected override void OnInitialized()
    {
        Console.WriteLine(_shouldRender);
        base.OnInitialized();
    }

    public void ShowModal()
    {
        _shouldRender = true;
        _ = JsRuntime.InvokeVoidAsync("eval", $"document.getElementById('{ElementIds.Modal}').showModal()");
    }

    public void CloseModal()
    {
        Console.WriteLine("Close Modal called");
        _shouldRender = false;
        StateHasChanged();
         _= JsRuntime.InvokeVoidAsync("eval", $"document.getElementById('{ElementIds.ModalClose}').submit()");
    }
}