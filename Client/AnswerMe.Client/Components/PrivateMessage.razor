@using Models.Shared.Responses.Message
@using AnswerMe.Client.Core.Extensions
@using AnswerMe.Client.Core.Enums
@using AnswerMe.Client.Core.Services
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Shared
@inject IPrivateMessageService PrivateMessageService
@inject IJSRuntime JsRuntime
@inject PvHubService PvHubService

<div class="chat-content mb-60">


    @foreach (var message in _messageList)
    {
        if (UserLastRoomVisit != null && message.CreatedDate > UserLastRoomVisit && _isNewMessageBannerPlaced == false)
        {
            _isNewMessageBannerPlaced = true;

            <div id="@ElementIds.NewMessageBanner" class="divider divider-info text-info">New Messages</div>
        }

        <div id="@message.id-message" class="chat  @(message.UserSender.Id == LoggedInUserId ? "chat-end" : "chat-start")">

            <div class="chat-bubble @(message.UserSender.Id == LoggedInUserId ? "primary-liner-gradient" : "dark-liner-gradient")">
                @if (!string.IsNullOrWhiteSpace(message.GroupInviteToken))
                {
                    <GroupInvitePreview GroupInviteToken="@message.GroupInviteToken"/>
                    
                }
                
                @message.Text

                <div class="chat-footer " style="display: grid;margin-top: 2px">

                    @if (message.UserSender.Id == LoggedInUserId)
                    {
                        @if (ContactLastRoomVisit >= message.CreatedDate || IsContactInRoom)
                        {
                            <span class="opacity-80" style="display: flex;justify-self: end">
                                <svg style="width: 20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="done">
                                    <path fill="none" d="M0 0h24v24H0V0z"></path><path d="M17.3 6.3c-.39-.39-1.02-.39-1.41 0l-5.64 5.64 1.41 1.41L17.3 7.7c.38-.38.38-1.02 0-1.4zm4.24-.01l-9.88 9.88-3.48-3.47c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L22.95 7.71c.39-.39.39-1.02 0-1.41h-.01c-.38-.4-1.01-.4-1.4-.01zM1.12 14.12L5.3 18.3c.39.39 1.02.39 1.41 0l.7-.7-4.88-4.9c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.03 0 1.42z" fill="#7fffd4" class="color000000 svgShape"></path>
                                </svg>
                                <time class="text-xs ">@message.CreatedDate.Value.LocalDateTime.ToString("HH:mm")</time>
                            </span>
                        }
                        else
                        {
                            <span class="opacity-80" style="display: flex;justify-self: end">
                                <svg style="width: 20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="done">
                                    <path fill="none" d="M0 0h24v24H0V0z"></path><path d="M9 16.2l-3.5-3.5c-.39-.39-1.01-.39-1.4 0-.39.39-.39 1.01 0 1.4l4.19 4.19c.39.39 1.02.39 1.41 0L20.3 7.7c.39-.39.39-1.01 0-1.4-.39-.39-1.01-.39-1.4 0L9 16.2z" fill="#7fffd4" class="color000000 svgShape"></path>
                                </svg>
                                <time class="text-xs ">@message.CreatedDate!.Value.LocalDateTime.ToString("HH:mm")</time>

                            </span>
                        }
                    }
                    else
                    {
                        <span class="opacity-80" style="display: flex;justify-self: start">
                            <time class="text-xs ">@message.CreatedDate!.Value.LocalDateTime.ToString("HH:mm")</time>
                        </span>
                    }

                </div>
            </div>

        </div>
    }

</div>

@code {
    [Parameter] public Guid RoomId { get; set; }
    [Parameter] public bool IsContactInRoom { get; set; }
    [Parameter] public Guid LoggedInUserId { get; set; }
    [Parameter] public DateTimeOffset? ContactLastRoomVisit { get; set; }
    [Parameter] public DateTimeOffset? UserLastRoomVisit { get; set; }
    private List<MessageResponse> _messageList = new();
    private bool _isNewMessageBannerPlaced = false;
    private string _lastLook = "";


    private PaginationRequest _oldMessagePaginationRequest = new() { PageSize = 10, CurrentPage = 1 };
    private PaginationRequest _newMessagePaginationRequest = new() { PageSize = 10, CurrentPage = 1 };


    private bool _firstLoad = true;

    internal static class ElementIds
    {
        public static Guid NewMessageBanner { get; } = Guid.NewGuid();
    }


    protected override async Task OnInitializedAsync()
    {
        var result = await PrivateMessageService.GetPrivateMessagesAsync(RoomId, _firstLoad, _newMessagePaginationRequest);
        if (result.IsSuccess)
        {
            _messageList = result.AsSuccess.Value.Items;

            _newMessagePaginationRequest.CurrentPage = result.AsSuccess.Value.Pagination.CurrentPage;
            _oldMessagePaginationRequest.CurrentPage = result.AsSuccess.Value.Pagination.CurrentPage;
        }

        Console.WriteLine("Last room visit " + ContactLastRoomVisit);

        if (result.IsNotFound)
        {
        }

        if (result.IsAccessDenied)
        {
        }

        PvHubService.NewPvMessage(AddNewMessageAsync);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstLoad && _isNewMessageBannerPlaced == false && _messageList.Any())
        {
            await JsRuntime.InvokeVoidAsync("ScrollToView", _messageList.Last().id + "-message");
            _firstLoad = false;
        }
        else
        {
            if (_isNewMessageBannerPlaced )
            {
                await JsRuntime.ScrollToViewAsync(_messageList[5].id + "-message");
            }
        }
       
    }

    public async Task LoadNewMessages()
    {
        if (_newMessagePaginationRequest.CurrentPage > 1)
        {
            _newMessagePaginationRequest.CurrentPage--;
            Console.WriteLine(_newMessagePaginationRequest.CurrentPage);
            var result = await PrivateMessageService.GetPrivateMessagesAsync(RoomId, false, _newMessagePaginationRequest);

            if (result.IsSuccess && result.AsSuccess.Value.Items.Any())
            {
                _messageList.AddRange(result.AsSuccess.Value.Items);
                StateHasChanged();
            }
        }
    }

    public async Task LoadOldMessages()
    {
        var lastLook = _messageList.First().id + "-message";
        _lastLook = lastLook;

        _oldMessagePaginationRequest.CurrentPage++;
        Console.WriteLine(_oldMessagePaginationRequest.CurrentPage);
        Console.WriteLine("AAAAAAA Old");
        var result = await PrivateMessageService.GetPrivateMessagesAsync(RoomId, false, _oldMessagePaginationRequest);

        if (result.IsSuccess && result.AsSuccess.Value.Items.Any())
        {
            _messageList.InsertRange(0, result.AsSuccess.Value.Items);
            StateHasChanged();
        }

        await JsRuntime.ScrollToViewAsync(_lastLook);
    }

    //here is the new logic , so if scroll was at one three , load old data util the scroll kik from one three
    //the point is when you load new data the scroll will be smaller and smaller so it could be kicked from one three 
    //if it doesn't work when user scroll to view first 5 div in chat box try to load another old chat data
    // maybe we too much account on scroll and because the size of it always change (cause of the amount of data) 
    private void AddNewMessageAsync(MessageResponse messageResponse)
    {
        _isNewMessageBannerPlaced = true;
        {
            var messageClass = "";
            if (messageResponse.UserSender.Id == LoggedInUserId)
            {
                messageClass = "backInRight";
            }
            else
            {
                messageClass = "backInLeft";
            }

            _messageList.Add(messageResponse);
            StateHasChanged();
            _ = JsRuntime.AddClassAsync(messageResponse.id + "-message", messageClass);
            _ = JsRuntime.InvokeVoidAsync("ScrollToEnd", ChatLayout.ElementIds.ChatScroll.ToString());
        }
    }


}