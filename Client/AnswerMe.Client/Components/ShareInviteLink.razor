@using AnswerMe.Client.Core.Extensions
@using Models.Shared.Requests.Message
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Group
@using Models.Shared.Responses.PrivateRoom
@inject IGroupService GroupService
@inject IPrivateRoomService PrivateRoomService
@inject IGroupMessageService GroupMessageService
@inject IPrivateMessageService PrivateMessageService


<div class="h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-gray-900">
    <div role="tablist" class="tabs tabs-boxed grid grid-cols-2 tab-primary" style="background-color: #111827">

        <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Private Chat" style="color: wheat" checked>
        <div role="tabpanel" class="tab-content ">
            <ul class="space-y-2 font-medium" style="background-color: #111827">
                @foreach (var pv in _privateRoomResponseList)
                {
                    <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:20px ">
                        <div id="@pv.Contact.Id-Status" class="avatar @(pv.Contact.IsOnline ? "online" : "offline") ">
                            <div class="w-16 h-16 rounded-full">
                                <UserAvatar Class="w-16" ImageUrl="@pv.Contact.ProfileImage" Letter="@pv.Contact.Name.FirstLetter()"/>
                            </div>
                        </div>
                        <div class="w-full  flex flex-col-reverse">
                          
                            <div style="display: grid">
                                <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@pv.Contact.Name</h1>

                                <div style=" grid-column-end: 12">
                                    <button @onclick="()=>SendPvInvite(pv.RoomNotify.RoomId)" style="max-width: 30px" class="btn btn-circle">
                                        <svg style="max-width: 30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="message">
                                            <path fill="#6563FF" d="M20.34,9.32l-14-7a3,3,0,0,0-4.08,3.9l2.4,5.37h0a1.06,1.06,0,0,1,0,.82l-2.4,5.37A3,3,0,0,0,5,22a3.14,3.14,0,0,0,1.35-.32l14-7a3,3,0,0,0,0-5.36Zm-.89,3.57-14,7a1,1,0,0,1-1.35-1.3l2.39-5.37A2,2,0,0,0,6.57,13h6.89a1,1,0,0,0,0-2H6.57a2,2,0,0,0-.08-.22L4.1,5.41a1,1,0,0,1,1.35-1.3l14,7a1,1,0,0,1,0,1.78Z"></path>
                                        </svg>
                                    </button>
                                </div>

                            </div>

                        </div>
                    </li>
                }
            </ul>
        </div>

        <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Group Chat" style="color: wheat"/>
        <div role="tabpanel" class="tab-content ">
            <ul class="space-y-2 font-medium" style="background-color: #111827">
                @foreach (var gr in _groupResponseList)
                {
                    <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:20px ">
                        <div class="avatar">
                            <div class="w-16 h-16 rounded-full">
                                <UserAvatar ImageUrl="@gr.Group.RoomImage" Letter="@gr.Group.Name.FirstLetter()"/>
                            </div>
                        </div>
                        <div class="w-full  flex flex-col-reverse">
                         
                            <div style="display: grid">
                                <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@gr.Group.Name</h1>

                                <div style=" grid-column-end: 12">

                                    <button @onclick="()=>SendGroupInvite(gr.Group.Id)" class="btn btn-circle">
                                        <svg style="max-width: 30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="message">
                                            <path fill="#6563FF" d="M20.34,9.32l-14-7a3,3,0,0,0-4.08,3.9l2.4,5.37h0a1.06,1.06,0,0,1,0,.82l-2.4,5.37A3,3,0,0,0,5,22a3.14,3.14,0,0,0,1.35-.32l14-7a3,3,0,0,0,0-5.36Zm-.89,3.57-14,7a1,1,0,0,1-1.35-1.3l2.39-5.37A2,2,0,0,0,6.57,13h6.89a1,1,0,0,0,0-2H6.57a2,2,0,0,0-.08-.22L4.1,5.41a1,1,0,0,1,1.35-1.3l14,7a1,1,0,0,1,0,1.78Z"></path>
                                        </svg>
                                    </button>
                                </div>

                            </div>

                        </div>
                    </li>
                }
            </ul>
        </div>

    </div>
</div>

@code {
    [Parameter] public string InviteToken { get; set; }
    private PaginationRequest _groupPaginationRequest = new() { CurrentPage = 1, PageSize = 30 };
    private PaginationRequest _privatePaginationRequest = new() { CurrentPage = 1, PageSize = 30 };
    private List<GroupResponse> _groupResponseList = new();
    private List<PrivateRoomResponse> _privateRoomResponseList = new();

    private SendMessageRequest _message = new();
    
    protected override async Task OnInitializedAsync()
    {
        _message.GroupInvitationToken = InviteToken;
        
        var groupResult = await GroupService.GetGroupsAsync(_groupPaginationRequest);
        var privateResult = await PrivateRoomService.GetPrivateRoomsAsync(_privatePaginationRequest);

        if (groupResult.IsSuccess)
        {
            _groupResponseList = groupResult.AsSuccess.Value.Items;
        }

        if (privateResult.IsSuccess)
        {
            _privateRoomResponseList = privateResult.AsSuccess.Value.Items;
        }
    }

    private async Task SendGroupInvite(Guid roomId)
    {
        await GroupMessageService.SendMessageAsync(roomId, _message);
        var room= _groupResponseList.SingleOrDefault(x => x.Group.Id == roomId);
        if (room != null)
        {
            _groupResponseList.Remove(room);
        }
    }

    private async Task SendPvInvite(Guid roomId)
    {
        await PrivateMessageService.SendMessageAsync(roomId, _message);
        var room= _privateRoomResponseList.SingleOrDefault(x => x.RoomNotify.RoomId == roomId);
        if (room != null)
        {
            _privateRoomResponseList.Remove(room);
        }
    }

}