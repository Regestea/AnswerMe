@using AnswerMe.Client.Core.AnimationLibrary
@using AnswerMe.Client.Core.Extensions
@using AnswerMe.Client.Core.Models
@using Models.Shared.Requests.Upload
@using Models.Shared.Responses.Shared
@using FileType = Models.Shared.Requests.Upload.FileType
@inject IJSRuntime JsRuntime
@inject IObjectStorageService StorageService
@inject IObjectHelperService ObjectHelperService

<div class="grid">
    <div class="max-h-[200px] w-80 overflow-x-auto p-2 justify-self-center">

        @foreach (var audio in Audios)
        {
            <div class="relative block h-16 flex-none rounded-lg border border-gray-100 bg-white p-2 mt-2 shadow-md dark:border-gray-800 dark:bg-gray-800">
                <div class="flex items-center gap-3">
                    <div class="avatar">
                        <div class="mask mask-squircle h-12 w-12">
                            @if (!audio.IsDone)
                            {
                                <div
                                    role="status"
                                    class="absolute left-1/2 top-2/4 -translate-x-1/2 -translate-y-1/2">
                                    <div
                                        class="radial-progress text-primary"
                                        style="--value: @audio.UploadProgress; background-color: #14191e"
                                        role="progressbar">
                                        @if (audio.UploadProgress != null)
                                        {
                                            @(audio.UploadProgress + "%")
                                        }

                                    </div>
                                </div>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 128 128" viewBox="0 0 128 128" id="Music">
                                    <path fill="#6563ff" d="M124.6,4.5l-0.2-0.2c-1.1-1.4-3.5-2.7-6.5-2.7H10.1c-3,0-5.8,1.4-7,3.5L2.4,6.3l0,112.5c0,3.7,3.9,7.6,7.6,7.6
	                                H118c3.7,0,7.6-3.9,7.6-7.6V5.8L124.6,4.5z M85.6,45.2c-0.9,0.8-2.2,0.8-3.2,0.3l-8.5-5.3l0,44.6c0,1.5-0.2,3.1-0.7,4.5
                                    c-0.5,1.4-1.5,2.7-2.7,3.8c-2.6,7.3-8.4,11.4-16.1,11.4c-10.3,0-18.2-10.1-14.7-20.9c2.1-6.5,8.3-10.6,15.1-10.5c2.1,0,4.1,0.4,5.8,1.1l2.6,1V32.2h0
	                                c0-0.8,0.2-1.6,0.6-2.3c1.4-2.5,4.5-3.3,6.9-2c0.6,0.3,1,0.7,1.4,1.2l11.2,12.2C86.9,42.5,86.8,44.2,85.6,45.2z" class="color2d3e50 svgShape"></path>
                                </svg>
                            }
                        </div>
                    </div>
                    @if (audio.IsError)
                    {
                        <div>
                            <div class="font-bold text-red-500">@(audio.FullName.SummarizeIfMoreThan(11))</div>
                            <div class="text-sm text-red-500">Invalid size or format</div>
                        </div>
                    }
                    else
                    {
                        <div>
                            <div class="font-bold">@audio.FullName.SummarizeIfMoreThan(11)</div>
                            <div class="text-sm opacity-50">@((int)audio.FileSize) MB</div>
                        </div>
                    }

                    <button @onclick="() => Remove(audio.Id)" class="btn btn-circle text-primary px-4 text-lg ml-auto" style="width: 3rem;height: 3rem">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            </div>
        }


    </div>
</div>
<InputFile OnChange="UploadStash" id="@ElementIds.UploadInput" type="file" hidden="hidden" multiple="multiple" accept="@_validTypes"/>


@code {
    [Parameter] public EventCallback<List<UploadModel>> UploadedMediaList { get; set; }
    [Parameter] public EventCallback<bool> IsUploading { get; set; }
    private string _validTypes = ".mp3,.ogg,.wav";
    private List<AudioUploadModel> Audios { get; set; } = new();


    private bool _isUploading = false;


    private static class ElementIds
    {
        public static Guid UploadInput { get; } = Guid.NewGuid();
    }

    private async Task UploadStash(InputFileChangeEventArgs inputFile)
    {
        if (inputFile.FileCount + Audios.Count > 20)
        {
            await JsRuntime.ShowErrorAsync($"Can not upload more than 20 files , you can upload {20 - Audios.Count} more");
            return;
        }

        await IsUploading.InvokeAsync(true);
        foreach (var file in inputFile.GetMultipleFiles(20 - Audios.Count))
        {
            Audios.Add(new AudioUploadModel
            {
                Id = Guid.NewGuid(),
                FullName = file.Name,
                UploadProgress = null,
                FileSize = file.Size.SizeMB(),
                IsCanceled = false,
                UploadToken = null,
                File = file
            });
            StateHasChanged();
        }

        await UploadStashAudios();
    }

    private async Task UploadStashAudios()
    {
        foreach (var audio in Audios.Where(x => x.IsDone == false).ToList())
        {
            if (audio.IsCanceled)
            {
                Audios.Remove(audio);
                StateHasChanged();
                continue;
            }

            var tokenResult = await StorageService.GetUploadTokenAsync(new UploadRequest()
            {
                FileFormat = await JsRuntime.GetInputFileType(ElementIds.UploadInput.ToString()),
                FileSizeMb = audio.File.Size.SizeMB(),
                FileName = audio.File.Name,
                FileType = FileType.audio
            });

            if (tokenResult.IsSuccess)
            {
                var uploadResult = await audio.File.UploadChunks(ObjectHelperService, StorageService, tokenResult.AsSuccess.Value.Token, Guid.NewGuid(), StateHasChanged, (x) => audio.UploadProgress = x, audio.IsCanceled);

                if (audio.IsCanceled)
                {
                    Audios.Remove(audio);
                    StateHasChanged();
                    continue;
                }

                if (uploadResult.IsSuccess)
                {
                    audio.IsDone = true;
                    audio.UploadToken = uploadResult.AsSuccess.Value.Token;
                }

                if (!uploadResult.IsSuccess)
                {
                    audio.IsError = true;
                    StateHasChanged();
                }
            }

            if (!tokenResult.IsSuccess)
            {
                audio.IsError = true;
                StateHasChanged();
            }
        }

        await IsUploading.InvokeAsync(false);
    }

    private void Remove(Guid id)
    {
        var image = Audios.FirstOrDefault(x => x.Id == id);
        if (image != null)
        {
            if (string.IsNullOrWhiteSpace(image.UploadToken) || image.UploadProgress != null || image.IsDone)
            {
                Audios.Remove(image);
                StateHasChanged();
            }
            else
            {
                image.IsCanceled = true;
            }
        }
    }

    public async Task ClickDoneButtonAsync()
    {
        var uploadModel = new List<UploadModel>();
        foreach (var audio in Audios)
        {
            if (audio.IsDone && !string.IsNullOrWhiteSpace(audio.UploadToken))
            {
                uploadModel.Add(new()
                {
                    Token = audio.UploadToken
                });
            }
        }

        await UploadedMediaList.InvokeAsync(uploadModel);
    }

    public async Task ClickUploadButtonAsync()
    {
        await JsRuntime.ClickAsync(ElementIds.UploadInput.ToString());
    }

}