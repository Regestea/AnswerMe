@using System.Globalization
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Group
@using Models.Shared.Responses.PrivateRoom
@using AnswerMe.Client.Core.Extensions
@using AnswerMe.Client.Core.Services
@using Models.Shared.Responses.Message
@using Models.Shared.Responses.Shared
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject IPrivateRoomService PrivateRoomService
@inject IGroupService GroupService
@inject IUserService UserService
@inject OnlineHubService OnlineService

<div class="flex">
    <div class="dropdown dropdown-right" style="z-index: 2">
        <div tabindex="0" role="button" class="btn btn-circle" style="width: 60px;height: 60px;margin: 20px 0 20px 35px;">
            <svg class="swap-off fill-current" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 512 512">
                <path d="M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z"/>
            </svg>
        </div>
        <ul class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52" style="padding: 10px;margin-top: 50px">
            <li>
                <button class="btn" @onclick="ViewAccountAsync">
                    <svg style="width: 30px;height: 30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="Person">
                        <defs>
                            <linearGradient id="gradient9" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" stop-color="rgba(130, 145, 255, 1)" />
                                <stop offset="100%" stop-color="rgba(110, 30, 235, 1)" />
                            </linearGradient>
                        </defs>
                        <g fill="url(#gradient9)" class="color000000 svgShape">
                            <path d="M12 11a4 4 0 1 0-4-4 4 4 0 0 0 4 4zm6 10a1 1 0 0 0 1-1 7 7 0 0 0-14 0 1 1 0 0 0 1 1z"></path>
                        </g>
                    </svg>
                    Account
                </button>
            </li>
            <li>
                <button class="btn" @onclick="Logout">
                    <svg style="width: 30px;height: 30px" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="logout">
                        <defs>
                            <linearGradient id="gradient10" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" stop-color="rgba(130, 145, 255, 1)" />
                                <stop offset="100%" stop-color="rgba(110, 30, 235, 1)" />
                            </linearGradient>
                        </defs>
                        <path fill="url(#gradient10)" fill-rule="evenodd" d="M14.75 12C14.75 11.5858 14.4142 11.25 14 11.25H2C1.58579 11.25 1.25 11.5858 1.25 12C1.25 12.4142 1.58579 12.75 2 12.75H14C14.4142 12.75 14.75 12.4142 14.75 12Z" clip-rule="evenodd"></path>
                        <path fill="url(#gradient10)" fill-rule="evenodd" d="M6.03033 7.96967C5.73744 7.67678 5.26256 7.67678 4.96967 7.96967L1.46967 11.4697C1.17678 11.7626 1.17678 12.2374 1.46967 12.5303L4.96967 16.0303C5.26256 16.3232 5.73744 16.3232 6.03033 16.0303 6.32322 15.7374 6.32322 15.2626 6.03033 14.9697L3.06066 12 6.03033 9.03033C6.32322 8.73744 6.32322 8.26256 6.03033 7.96967zM14.5956 5.25C12.017 5.25 9.77484 6.73848 8.66955 8.9258 8.48274 9.29549 8.0316 9.44375 7.66191 9.25693 7.29221 9.07012 7.14396 8.61898 7.33077 8.24929 8.67788 5.58343 11.422 3.75 14.5956 3.75 19.1083 3.75 22.7502 7.45274 22.7502 12 22.7502 16.5473 19.1083 20.25 14.5956 20.25 11.422 20.25 8.67788 18.4166 7.33077 15.7507 7.14396 15.381 7.29221 14.9299 7.66191 14.7431 8.0316 14.5563 8.48274 14.7045 8.66955 15.0742 9.77484 17.2615 12.017 18.75 14.5956 18.75 18.2618 18.75 21.2502 15.737 21.2502 12 21.2502 8.26299 18.2618 5.25 14.5956 5.25z" clip-rule="evenodd"></path>
                    </svg>
                    Log Out
                </button>

            </li>
        </ul>
    </div>

    <Logo/>
</div>


<div class="h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-gray-900">
    <div role="tablist" class="tabs tabs-boxed grid grid-cols-2 tab-primary" style="background-color: #111827">

        <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Private Chat" style="color: wheat" checked>
        <div role="tabpanel" class="tab-content ">
            <ul class="space-y-2 font-medium" style="background-color: #111827">
                @foreach (var pv in _privateRoomResponseList)
                {
                    <a @onclick="() => ViewPvRoom(pv.RoomNotify.RoomId)">
                        <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:20px ">
                            <div id="@pv.Contact.Id-Status" class="avatar @(pv.Contact.IsOnline ? "online" : "offline") ">
                                <div class="w-16 h-16 rounded-full">
                                    <UserAvatar Class="w-16" ImageUrl="@pv.Contact.ProfileImage" Letter="@pv.Contact.Name.FirstLetter()"/>
                                </div>
                            </div>
                            <div class="w-full  flex flex-col-reverse">
                                <div style="display: grid;margin-top: 15px">
                                    <p style="margin-left: 15px;font-size: 12px;min-height: 18px">@pv.RoomNotify.MessageGlance</p>

                                </div>
                                <div style="display: grid">
                                    <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@pv.Contact.Name</h1>

                                    <div style=" grid-column-end: 12">
                                        @if (pv.RoomNotify.TotalUnRead > 0)
                                        {
                                            <span id="@pv.RoomNotify.RoomId-UnReadMessageCount" class="badge badge-primary">

                                                @pv.RoomNotify.TotalUnRead

                                            </span>
                                        }
                                    </div>


                                </div>

                            </div>
                        </li>
                    </a>
                }
            </ul>
        </div>

        <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Group Chat" style="color: wheat"/>
        <div role="tabpanel" class="tab-content ">
            <ul class="space-y-2 font-medium" style="background-color: #111827">
                @foreach (var gr in _groupResponseList)
                {
                    <a @onclick="() => ViewGrRoom(gr.RoomNotify.RoomId)">
                        <li class="flex  hover:bg-gray-800 hover:cursor-pointer" style="border-radius: 0.5em;margin-top:20px ">
                            <div class="avatar">
                                <div class="w-16 h-16 rounded-full">
                                    <UserAvatar class="w-16" ImageUrl="@gr.Group.RoomImage" Letter="@gr.Group.Name.FirstLetter()"/>
                                </div>
                            </div>
                            <div class="w-full  flex flex-col-reverse">
                                <div style="display: grid;margin-top: 15px">
                                    <p style="margin-left: 15px;font-size: 12px;min-height: 18px">@gr.RoomNotify.MessageGlance</p>

                                </div>
                                <div style="display: grid">
                                    <h1 style="margin-left: 15px;font-style: italic;font-weight: bold">@gr.Group.Name</h1>

                                    <div style=" grid-column-end: 12">

                                        @if (gr.RoomNotify.TotalUnRead > 0)
                                        {
                                            <span id="@gr.RoomNotify.RoomId-UnReadMessageCount" class="badge badge-primary">
                                                @gr.RoomNotify.TotalUnRead
                                            </span>
                                        }
                                    </div>

                                </div>

                            </div>
                        </li>
                    </a>
                }
            </ul>
        </div>

    </div>
</div>


@code {

    [Parameter] public string? ChatsMenuClass { get; set; }

    [Parameter] public string? AccountMenuClass { get; set; }

    [Parameter] public EventCallback<string> ChatsMenuClassChanged { get; set; }

    [Parameter] public EventCallback<string> AccountMenuClassChanged { get; set; }

    private PaginationRequest _privatePaginationRequest = new() { CurrentPage = 1, PageSize = 30 };
    private PaginationRequest _groupPaginationRequest = new() { CurrentPage = 1, PageSize = 30 };

    private List<PrivateRoomResponse> _privateRoomResponseList = new();
    private List<GroupResponse> _groupResponseList = new();

    string? _roomId;


    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("GLOBAL.SetNavMenuDotnetReference", lDotNetReference);
        
        await SetData();

        OnlineService.UserWentOnline(SetContactOnline);
        OnlineService.UserWentOffline(SetContactOffline);

        OnlineService.NotifyNewPvMessage(SetPvLastMessage);
        OnlineService.NotifyEditPvMessage(EditPvMessage);
        OnlineService.NotifyRemovePvMessage(RemovePvMessage);

        OnlineService.NotifyNewGrMessage(SetGrLastMessage);
        OnlineService.NotifyEditGrMessage(EditGrMessage);
        OnlineService.NotifyRemoveGrMessage(RemoveGrMessage);
    }


    [JSInvokable("RefreshNavMenuData")]
    public async Task RefreshNavMenuData()
    {
        await SetData();
        StateHasChanged();
    }

    private async Task SetData()
    {
        var privateRoomsResponse = await PrivateRoomService.GetPrivateRoomsAsync(_privatePaginationRequest);
        var groupResponse = await GroupService.GetGroupsAsync(_groupPaginationRequest);

        if (privateRoomsResponse.IsSuccess)
        {
            _privateRoomResponseList = privateRoomsResponse.AsSuccess.Value.Items;
        }

        if (groupResponse.IsSuccess)
        {
            _groupResponseList = groupResponse.AsSuccess.Value.Items;
        }
    }
    
    private void SetUrlIdIfExist()
    {
        var uri = new Uri(NavigationManager.Uri);

        // Get the last segment of the path, which contains the desired part
        string desiredPart = uri.Segments[uri.Segments.Length - 1];

        // Remove any possible trailing slash and print the result
        _roomId = desiredPart.TrimEnd('/');
    }

    private void SetContactOnline(Guid contactId)
    {
        var privateRoomResponse = _privateRoomResponseList.FirstOrDefault(x => x.Contact.Id == contactId);
        if (privateRoomResponse != null)
        {
            privateRoomResponse.Contact.IsOnline = true;
            StateHasChanged();
        }
    }

    private void SetContactOffline(Guid contactId)
    {
        var privateRoomResponse = _privateRoomResponseList.FirstOrDefault(x => x.Contact.Id == contactId);
        if (privateRoomResponse != null)
        {
            privateRoomResponse.Contact.IsOnline = false;
            StateHasChanged();
        }
    }

    private void SetPvLastMessage(RoomNotifyResponse response)
    {
        var pv = _privateRoomResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == response.RoomId);
        SetUrlIdIfExist();
        if (pv != null)
        {
            if (response.RoomId.ToString() != _roomId)
            {
                pv.RoomNotify.TotalUnRead += 1;
            }

            pv.RoomNotify.MessageGlance = response.MessageGlance;
            StateHasChanged();
        }
    }

    private void EditPvMessage(RoomNotifyResponse response)
    {
        var pv = _privateRoomResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == response.RoomId);

        if (pv != null)
        {
            pv.RoomNotify.MessageGlance = response.MessageGlance;
            StateHasChanged();
        }
    }

    private void RemovePvMessage(RoomNotifyResponse response)
    {
        var pv = _privateRoomResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == response.RoomId);
        SetUrlIdIfExist();
        if (pv != null)
        {
            if (response.RoomId.ToString() != _roomId && pv.RoomNotify.TotalUnRead >= 1)
            {
                pv.RoomNotify.TotalUnRead -= 1;
            }

            pv.RoomNotify.MessageGlance = response.MessageGlance;
            StateHasChanged();
        }
    }


    private void SetGrUnReadCount(Guid roomId, int count)
    {
        var gr = _groupResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == roomId);
        if (gr != null) gr.RoomNotify.TotalUnRead = count;
        StateHasChanged();
    }

    private void SetPvUnReadCount(Guid roomId, int count)
    {
        var pv = _privateRoomResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == roomId);
        if (pv != null) pv.RoomNotify.TotalUnRead = count;
        StateHasChanged();
    }


    private void SetGrLastMessage(RoomNotifyResponse response)
    {
        var gr = _groupResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == response.RoomId);
        SetUrlIdIfExist();
        if (gr != null)
        {
            if (response.RoomId.ToString() != _roomId)
            {
                gr.RoomNotify.TotalUnRead += 1;
            }

            gr.RoomNotify.MessageGlance = response.MessageGlance;
            StateHasChanged();
        }
    }

    private void EditGrMessage(RoomNotifyResponse response)
    {
        var gr = _groupResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == response.RoomId);

        if (gr != null)
        {
            gr.RoomNotify.MessageGlance = response.MessageGlance;
            StateHasChanged();
        }
    }

    private void RemoveGrMessage(RoomNotifyResponse response)
    {
        var gr = _groupResponseList.FirstOrDefault(x => x.RoomNotify.RoomId == response.RoomId);
        SetUrlIdIfExist();
        if (gr != null)
        {
            if (response.RoomId.ToString() != _roomId && gr.RoomNotify.TotalUnRead >= 1)
            {
                gr.RoomNotify.TotalUnRead -= 1;
            }

            gr.RoomNotify.MessageGlance = response.MessageGlance;
            StateHasChanged();
        }
    }


    async Task ViewPvRoom(Guid id)
    {
        await NavigateToPv(id);
        SetPvUnReadCount(id, 0);
    }

    async Task ViewGrRoom(Guid id)
    {
        await NavigateToGr(id);
        SetGrUnReadCount(id, 0);
    }

    async Task NavigateToPv(Guid id)
    {
        NavigationManager.NavigateTo($"PV/{id}");
        await JsRuntime.InvokeVoidAsync("ResizeComponent");
        StateHasChanged();
    }

    async Task NavigateToGr(Guid id)
    {
        NavigationManager.NavigateTo($"GR/{id}");
        await JsRuntime.InvokeVoidAsync("ResizeComponent");
        StateHasChanged();
    }

    async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        NavigationManager.NavigateTo("/", true);
    }

    async Task ViewAccountAsync()
    {
        ChatsMenuClass = "-translate-x-full";
        AccountMenuClass = "-translate-x-0";
        await JsRuntime.InvokeVoidAsync("ViewAccountMenu");

        await ChatsMenuClassChanged.InvokeAsync(ChatsMenuClass);
        await AccountMenuClassChanged.InvokeAsync(AccountMenuClass);
    }

}