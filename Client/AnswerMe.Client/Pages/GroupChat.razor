@page "/GR/{RoomId:guid}"
@using AnswerMe.Client.Components
@using AnswerMe.Client.Core.Enums
@using AnswerMe.Client.Core.Extensions
@using AnswerMe.Client.Core.Services
@using AnswerMe.Client.Components.Media
@inject AuthStateProvider AuthStateProvider
@inject IGroupService GroupService
@inject IJSRuntime JsRuntime

<div class="p-4 sm:ml-64 body-content element" >

    <GrNavHeader RefreshNavMenu="RefreshNavMenuData" @key="RoomId" RoomId="RoomId" IsGroupAdmin="_isGroupAdmin"/>
    @if (AudioUrl != null)
    {
        <AudioPlayer Close="()=>AudioUrl=null" Url="@AudioUrl" />
    }
    <ChatLayout Style="@(AudioUrl != null ? "top:6em" : "")" CallLoadNewMessages="LoadNewMessages" CallLoadOldMessages="LoadOldMessages">
        <ChatContent>
            <GroupMessage OpenAudio="(x)=>AudioUrl=x" @ref="_groupMessageRef" @key="RoomId" RoomId="RoomId" UserLastRoomVisit="_userLastRoomVisit" LoggedInUserId="_loggedInUserId" />
            
            <SendMessage CurrentRoomType="RoomType.Group" RoomId="RoomId"/>
        </ChatContent>
    </ChatLayout>

</div>

@code {
    [Parameter] public Guid RoomId { get; set; }
    private Guid _loggedInUserId;
    private DateTimeOffset? _userLastRoomVisit;
    private GroupMessage _groupMessageRef;
    private bool _isGroupAdmin;
    private string? AudioUrl;


    protected override async Task OnInitializedAsync()
    {
        var user = await AuthStateProvider.ExtractUserDataFromLocalTokenAsync();
        _loggedInUserId = user.id;

        var response = await GroupService.IsAdminAsync(RoomId, _loggedInUserId);
        
        if (response.IsSuccess)
        {
            _isGroupAdmin = response.AsSuccess.Value.Result;
        }
        
        _userLastRoomVisit = await GetLastVisit(_loggedInUserId);
        
        
    }

    private async Task RefreshNavMenuData()
    {
        await JsRuntime.InvokeVoidAsync("RefreshNavMenuData");
    }
    
    public async Task LoadNewMessages()
    {
        await _groupMessageRef.LoadNewMessagesAsync();
    }

    public async Task LoadOldMessages()
    {
        await _groupMessageRef.LoadOldMessagesAsync();
    }
    
    private async Task<DateTime?> GetLastVisit(Guid userId)
    {
        var lastSeen = await GroupService
            .GetGroupLastSeenAsync(userId, RoomId);


        if (lastSeen.IsSuccess)
        {
            return lastSeen.AsSuccess.Value.LastSeenUtc.LocalDateTime;
        }

        return null;
    }

}