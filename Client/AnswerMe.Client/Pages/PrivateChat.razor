@page "/PV/{RoomId:guid}"
@using AnswerMe.Client.Components
@using AnswerMe.Client.Core.Enums
@using AnswerMe.Client.Core.Services
@using Models.Shared.Responses.Message
@using Models.Shared.Responses.PrivateRoom
@using AnswerMe.Client.Components.Media
@inject AuthStateProvider AuthStateProvider
@inject IPrivateRoomService PrivateRoomService
@inject IUserService UserService
@inject IJSRuntime JsRuntime
@inject PvHubService PvHubService

 
<div class="p-4 sm:ml-64 body-content element">

    <PvNavHeader @key="RoomId" RoomId="RoomId" IsContactInRoom="_isContactInRoom" ContactLastRoomVisit="_contactLastRoomVisit" />
    @if (AudioUrl != null)
    {
    <AudioPlayer @key="@AudioUrl" Close="()=>AudioUrl=null" Url="@AudioUrl" />
    }
    <ChatLayout Class="@(AudioUrl != null ? "top-[8em] sm:top-[8em] md:top-[7em] lg:top-[6em] xl:top-[6em] 2xl:top-[5em];":"")" CallLoadNewMessages="LoadNewMessages" CallLoadOldMessages="LoadOldMessages">
        <ChatContent>
            <PrivateMessage @ref="_privateMessageRef" @key="RoomId"  RoomId="RoomId" UserLastRoomVisit="_userLastRoomVisit" ContactLastRoomVisit="_contactLastRoomVisit" IsContactInRoom="_isContactInRoom" LoggedInUserId="_loggedInUserId" OpenAudio="(x)=>AudioUrl=x"/>
            <SendMessage CurrentRoomType="RoomType.Private" RoomId="RoomId"/>
        </ChatContent>
    </ChatLayout>

</div>

@code {

    [Parameter] public Guid RoomId { get; set; }
    private PrivateMessage _privateMessageRef;
    private PrivateRoomResponse? _privateRoomResponse;
    private bool _isContactInRoom = false;
    private Guid _loggedInUserId;
    private string? AudioUrl;
    private DateTimeOffset _contactLastRoomVisit;
    private DateTimeOffset? _userLastRoomVisit;



    protected override async Task OnInitializedAsync()
    {
        var user = await AuthStateProvider.ExtractUserDataFromLocalTokenAsync();
        _loggedInUserId = user.id;
        var privateRoom = await PrivateRoomService.GetPrivateRoomByIdAsync(RoomId);

        if (!privateRoom.IsSuccess)
        {
            //redirect to 404 page
        }
        _privateRoomResponse = privateRoom.AsSuccess.Value;
        

        PvHubService.JoinedRoom(UserJoinedRoom);
        PvHubService.LeftRoom(UserLeftRoom);




        _userLastRoomVisit = await GetLastVisit(_loggedInUserId);

        var isContactInRoom = await PrivateRoomService.GetUserIsOnlineInRoom(RoomId, _privateRoomResponse.Contact.Id);

        _isContactInRoom = isContactInRoom.AsSuccess.Value.Result;

        Console.WriteLine("is contact online in room" + _isContactInRoom);

        if (!_isContactInRoom)
        {
            _contactLastRoomVisit = await GetLastVisit(_privateRoomResponse!.Contact.Id);
        }
    }

    private async Task<DateTimeOffset> GetLastVisit(Guid userId)
    {
        var lastSeen = await PrivateRoomService
            .GetRoomLastSeenAsync(userId, _privateRoomResponse!.RoomNotify.RoomId);


        if (lastSeen.IsSuccess)
        {
            return lastSeen.AsSuccess.Value.LastSeenUtc;
        }

        return DateTimeOffset.MinValue;
    }

    
    public async Task LoadNewMessages()
    {
        Console.WriteLine("load new one");
        await _privateMessageRef.LoadNewMessagesAsync();
    }

    public async Task LoadOldMessages()
    {
        Console.WriteLine("load old one");
        await _privateMessageRef.LoadOldMessagesAsync();
    }

    private void UserJoinedRoom(Guid userId)
    {
        if (_loggedInUserId == userId) return;
        Console.WriteLine("user joined room");
        _isContactInRoom = true;
        StateHasChanged();
    }

    private void UserLeftRoom(Guid userId)
    {
        if (_loggedInUserId == userId) return;
        _isContactInRoom = false;
        _contactLastRoomVisit = DateTimeOffset.UtcNow;
        StateHasChanged();
    }


}