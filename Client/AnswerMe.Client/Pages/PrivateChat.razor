@page "/PV/{RoomId:guid}"
@using AnswerMe.Client.Core.Enums
@using AnswerMe.Client.Core.Services
@using Models.Shared.Responses.Message
@using Models.Shared.Responses.PrivateRoom
@inject AuthStateProvider AuthStateProvider
@inject IPrivateRoomService PrivateRoomService
@inject IUserService UserService
@inject IJSRuntime JsRuntime
@inject PvHubService PvHubService


@* <RoomBackgroundHub UserJoinedRoom="UserJoinedRoom" UserLeftRoom="UserLeftRoom" NewMessage="AddNewMessage" @key="RoomId" RoomId="RoomId" RoomType="RoomType.Private"/> *@
<div class="p-4 sm:ml-64 body-content element">

    <NavHeader @key="RoomId" RoomId="RoomId" CurrentRoomType="RoomType.Private"/>

    <ChatLayout>
        <ChatContent>
            @if (_isContactInRoom || _contactLastRoomVisit != DateTimeOffset.MinValue)
            {
                <PrivateMessage @key="RoomId" RoomId="RoomId" UserLastRoomVisit="_userLastRoomVisit" ContactLastRoomVisit="_contactLastRoomVisit" IsContactInRoom="_isContactInRoom" LoggedInUserId="_loggedInUserId"/>
            }

            <SendMessage CurrentRoomType="RoomType.Private" RoomId="RoomId"/>
        </ChatContent>
    </ChatLayout>

</div>

@code {

    [Parameter] public Guid RoomId { get; set; }
    private PrivateRoomResponse? _privateRoomResponse;
    private bool _isContactInRoom = false;
    private Guid _loggedInUserId;
    private DateTimeOffset? _contactLastRoomVisit;
    private DateTimeOffset? _userLastRoomVisit;


    protected override async Task OnInitializedAsync()
    {
        var user = await AuthStateProvider.ExtractUserDataFromLocalTokenAsync();
        _loggedInUserId = user.id;
        var privateRoom = await PrivateRoomService.GetPrivateRoomByIdAsync(RoomId);

        if (!privateRoom.IsSuccess)
        {
            //redirect to 404 page
        }

       

        PvHubService.JoinedRoom(UserJoinedRoom);
        PvHubService.LeftRoom(UserLeftRoom);
 


        _privateRoomResponse = privateRoom.AsSuccess.Value;
        
        _userLastRoomVisit= await GetLastVisit(_loggedInUserId);

        var isContactInRoom = await PrivateRoomService.GetUserIsOnlineInRoom(RoomId, _privateRoomResponse.Contact.Id);

        _isContactInRoom = isContactInRoom.AsSuccess.Value.Result;

        Console.WriteLine("is contact online in room"+ _isContactInRoom);

        if (!_isContactInRoom)
        {
            _contactLastRoomVisit= await GetLastVisit(_privateRoomResponse!.Contact.Id);
        }
    }

    private async Task<DateTime?> GetLastVisit(Guid userId)
    {
        var lastSeen = await PrivateRoomService
            .GetRoomLastSeenAsync(userId, _privateRoomResponse!.RoomNotify.RoomId);


        if (lastSeen.IsSuccess)
        {
            return lastSeen.AsSuccess.Value.LastSeenUtc.LocalDateTime;
        }

        return null;
    }


    private void UserJoinedRoom(Guid userId)
    {
        if (_loggedInUserId == userId) return;
        Console.WriteLine("user joined room");
        _isContactInRoom = true;
        StateHasChanged();
    }

    private void UserLeftRoom(Guid userId)
    {
        if (_loggedInUserId == userId) return;
        _isContactInRoom = false;
        _contactLastRoomVisit=DateTimeOffset.UtcNow;
        StateHasChanged();
    }


}