@page "/PV/{RoomId:guid}"
@using Models.Shared.Requests.Shared
@using Models.Shared.Responses.Message
@using AnswerMe.Client.Core.Services
@using Models.Shared.Responses.Shared
@inject IPrivateMessageService PrivateMessageService
@inject AuthStateProvider AuthStateProvider
@inject IUserService UserService
@inject IPrivateRoomService PrivateRoomService

<div class="p-4 sm:ml-64 body-content element">

    <NavHeader/>
    @if (_contact != null)
    {
        <h1>@_contact.Name</h1>
    }

    <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700 chat-area responsive-chat-area" style="border-bottom: none">
        <div class="chat-content mb-60">

            @foreach (var message in _messages)
            {
                <div class="chat @(message.UserSender.Id == _loggedInUserId ? "chat-end" : "chat-start")">
                    <div class="chat-image avatar">
                        <div class="w-10 rounded-full">
                            <UserAvatar Class="w-10" Letter="@message.UserSender.Name" ImageUrl="@message.UserSender.ProfileImage"/>
                        </div>
                    </div>
                    <div class="chat-header">
                        @message.UserSender.Name
                        <time class="text-xs opacity-50">12:45</time>
                    </div>
                    <div class="chat-bubble">@message.Text</div>
                    <div class="chat-footer opacity-50">
                        seen at @(_contactLastRoomVisit.HasValue ? _contactLastRoomVisit.Value.ToString("HH:mm") : "never")
                    </div>
                </div>
            }

        </div>

        <div class="send-box responsive-send-box ">
            <textarea style="height: 100px;width: 85%" class="textarea textarea-primary  mr-2 " placeholder="write you message ..."></textarea>

            <button class="btn btn-circle mr-2 w-16 ">
                <svg class="p-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="paperclip">
                    <path fill="#6563FF" d="M18.08,12.42,11.9,18.61a4.25,4.25,0,0,1-6-6l8-8a2.57,2.57,0,0,1,3.54,0,2.52,2.52,0,0,1,0,3.54l-6.9,6.89A.75.75,0,1,1,9.42,14l5.13-5.12a1,1,0,0,0-1.42-1.42L8,12.6a2.74,2.74,0,0,0,0,3.89,2.82,2.82,0,0,0,3.89,0l6.89-6.9a4.5,4.5,0,0,0-6.36-6.36l-8,8A6.25,6.25,0,0,0,13.31,20l6.19-6.18a1,1,0,1,0-1.42-1.42Z"></path>
                </svg>
            </button>

            <button class="btn btn-circle w-16   responsive-send-button">
                <svg class="p-2 " xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="message">
                    <path fill="#6563FF" d="M20.34,9.32l-14-7a3,3,0,0,0-4.08,3.9l2.4,5.37h0a1.06,1.06,0,0,1,0,.82l-2.4,5.37A3,3,0,0,0,5,22a3.14,3.14,0,0,0,1.35-.32l14-7a3,3,0,0,0,0-5.36Zm-.89,3.57-14,7a1,1,0,0,1-1.35-1.3l2.39-5.37A2,2,0,0,0,6.57,13h6.89a1,1,0,0,0,0-2H6.57a2,2,0,0,0-.08-.22L4.1,5.41a1,1,0,0,1,1.35-1.3l14,7a1,1,0,0,1,0,1.78Z"></path>
                </svg>

            </button>

        </div>


    </div>
</div>

@code {
    [Parameter] public Guid RoomId { get; set; }

    private List<MessageResponse> _messages = new();

    private PreviewUserResponse? _contact; 

    private PaginationRequest _paginationRequest = new() { PageSize = 10, CurrentPage = 1 };

    private Guid? _loggedInUserId;
    private DateTimeOffset? _contactLastRoomVisit;

    private bool _firstLoad = true;

    //get user by id and add it to the list
    protected override async Task OnInitializedAsync()
    {
        var user = await AuthStateProvider.ExtractUserDataFromLocalTokenAsync();
        _loggedInUserId = user.id;
        var privateRoom = await PrivateRoomService.GetPrivateRoomByIdAsync(RoomId);

        if (!privateRoom.IsSuccess)
        {
            //redirect to 404 page
        }

        _contact = privateRoom.AsSuccess.Value.Contact;

        var lastSeen = await PrivateRoomService
            .GetRoomLastSeenAsync(privateRoom.AsSuccess.Value.Contact.Id, privateRoom.AsSuccess.Value.Id);
        

        if (lastSeen.IsSuccess)
        {
            _contactLastRoomVisit = lastSeen.AsSuccess.Value.LastSeenUtc.LocalDateTime;
        }

        if (lastSeen.IsNotFound)
        {
            _contactLastRoomVisit = null;
        }

        var result = await PrivateMessageService.GetPrivateMessagesAsync(RoomId, _firstLoad, _paginationRequest);
        if (result.IsSuccess)
        {
            _messages = result.AsSuccess.Value.Items;
            _firstLoad = false;
            _paginationRequest.CurrentPage = result.AsSuccess.Value.Page;
        }

        if (result.IsNotFound)
        {
        }

        if (result.IsAccessDenied)
        {
        }
    }

}